{"code_in_html": "from sherpa.astro.ui import *\nimport numpy\n\n# Read from NED VOTable; ignore warnings that come from\n# out-of-date DEFINITION tag, conversions of column names\n# with spaces.\n\nimport warnings\nwarnings.simplefilter(\"ignore\") \n\nfrom vo.table import parse_single_table\ntbl = parse_single_table('3c273_sed.xml', pedantic=False)\n\n### BEGIN processing NED VOTable\n\n# Here, create a mask that will filter out:\n# Line measurements, as indicated in 'Frequency Mode' column\n# Entries with no uncertainty, or uncertainty == zero\n\n# Note: uncertainties are encoded as strings in the form\n# \"+/-X.YZ\" and must be conveted to floats X.YZ\n\n# I set a mask that filters out all line measurements, uncertainties\n# that were either zero or unable to be converted to float. This\n# mask will be passed to Sherpa as a filter.\nndata = len(tbl.array['NED Photometry Measurement'])\nstaterrors = numpy.zeros(ndata)\ndatamask = numpy.ones(ndata, dtype='bool')\n\nfor entry in xrange(ndata):\n  mode = tbl.array['Frequency Mode'][entry]\n  if (mode.lower().count('line') > 0):\n    datamask[entry] = False\n  error = tbl.array['NED Uncertainty'][entry]\n  if (error == ''):\n    datamask[entry] = False\n  else:\n    try:\n      error = float(error[3:])\n      if (error > 0.0):\n        staterrors[entry] = error\n      else:\n        datamask[entry] = False\n    except:\n      datamask[entry] = False\n      staterrors[entry] = 0.0\n\n### END processing of NED VOtable.\n\n# Create a Sherpa data set, based on arrays peeled out of the\n# VOTable we read in.\nload_arrays(1, tbl.array['Frequency'], tbl.array['NED Photometry Measurement'], staterrors)\n\n# Filter out data points that were line measurements or had no usable\n# uncertainties\nset_filter(1, datamask)\n\n# Change data plot to log space, with new title\nget_data_plot_prefs()['xlog'] = True\nget_data_plot_prefs()['ylog'] = True\nplot_data()\nset_plot_xlabel(\"log frequency (Hz)\")\nset_plot_ylabel(\"log F (Jy)\")\nset_plot_title(\"3C 273 SED\")\n\n# Set statistic to chi-squared with data variance; set initial parameters\n# and fit power-law\nset_stat(\"chi2datavar\")\nset_method(\"neldermead\")\nset_source(bpl1d.p1)\nguess(p1)\np1.eb=5e12\nraw_input(\"Press Return to fit:\")\n#p1.ref = 1\n#p1.ampl.max = 1e15\n#p1.ampl.min = 1\n#p1.ampl = 1e12\nfit()\n\n# Show model overplotting data\nignore(1e20)\nplot_fit()\nset_plot_xlabel(\"log frequency (Hz)\")\nset_plot_ylabel(\"log F (Jy)\")\nset_plot_title(\"3C 273 SED (from NED), Sherpa Broken Power-law Fit\")\nset_plot([\"title.size\",20])\nset_xaxis([\"tickformat\",\"%0.0z\",\"label.size\",18])\nset_yaxis([\"tickformat\",\"%0.0z\",\"label.size\",18])\nset_xaxis([\"ticklabel.size\",14])\nset_yaxis([\"ticklabel.size\",14])\n#print_window(\"3c273_sed_fit.pdf\",[\"fittopage\", True, \"clobber\", True])\n\n# Call conf() to get 3-sigma confidence limits\n#set_conf_opt(\"sigma\", 3)\n#conf()\n", "description": "[<p>This code snippet goes through the basic steps of importing and fitting a spectral energy distribution with <a href=\"http://cxc.harvard.edu/sherpa/\" target=\"_blank\" title=\"Sherpa webpage\">Sherpa</a>.\u00a0 The data were saved <a href=\"http://www.google.com/url?q=http%3A%2F%2Fnedwww.ipac.caltech.edu%2Fcgi-bin%2Fnph-datasearch%3Fsearch_type%3DPhoto_id%26objid%3D62790%26objname%3D3C%2520273%26img_stamp%3DYES%26hconst%3D73.0%26omegam%3D0.27%26omegav%3D0.73%26corr_z%3D1%26of%3Dtable&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNFURmVmJqos8QUnjuzi7InzaaktDA\" target=\"_blank\" title=\"NED SED data page\">from NED</a> in XML (VO Table) <a href=\"http://nedwww.ipac.caltech.edu/cgi-bin/nph-datasearch?ebars_spec=ebars&amp;label_spec=no&amp;x_spec=freq&amp;y_spec=Fnu_jy&amp;xr=-1&amp;objname=3C+273&amp;objid=62790&amp;search_type=Photo_id&amp;meas_type=&amp;of=xml_main&amp;objname=3C+273&amp;objid=62790&amp;search_type=Photo_id&amp;meas_type=\" target=\"_blank\" title=\"NED SED data as XML table.\">format</a> and are imported into python using the <a href=\"http://www.google.com/url?q=http%3A%2F%2Fstsdas.stsci.edu%2Fastrolib%2Fvo%2Fhtml%2F&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNF58x8ly-c6SCi0J0c0UJL6g5CDHQ\" target=\"_blank\" title='python \"vo\" module'>vo</a> module.\u00a0 After a little data processing, the SED is fit with a simple 2 power-law function. The script uses Sherpa's internally configured plotting capabilities to show the model overplotted on the data. The script was provided to astropython by Stephen Doe, Chandra X-ray Center, as part of an <a href=\"http://bit.ly/h2KF7q\" target=\"_blank\" title=\"Blog post for an expo of VO tools\">expo of virtual observatory</a> tools held in December 2010.\u00a0 </p>, <p></p>, <p> </p>]", "author": "virtualastronomer ", "tags": ["sherpa", "vo", "SEDs"], "date_published": "2010-12-14", "title": "Basic Sherpa SED Fitting"}