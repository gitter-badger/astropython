{"date_published": "2010-11-14", "author": "phn", "description": "<div class=\"entry\" id=\"blogbody\">\n<strong><h1 class=\"title\" style=\"text-align: center; font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \">PyFITS: FITS files in Python - part 2</h1><p style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \">PyFITS has many methods that provide more control over manipulating FITS files, than that provided by the convenience functions discussed in\u00a0<a class=\"reference external\" href=\"http://www.astropython.org/tutorial/2010/10/PyFITS-FITS-files-in-Python\">part 1 of this article</a>. In the following sections we discuss several of these methods.</p><div class=\"contents topic\" id=\"contents\" style=\"margin-top: 2em; margin-right: 2em; margin-bottom: 2em; margin-left: 2em; font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><p class=\"topic-title first\" style=\"margin-top: 0px !important; font-weight: bold; \">Contents</p><ul class=\"simple\" style=\"margin-bottom: 1em; \"><li><a class=\"reference internal\" href=\"#hdulist\" id=\"id2\">HDUList</a></li>\n<li><a class=\"reference internal\" href=\"#hdu-object\" id=\"id3\">HDU object</a></li>\n<li><a class=\"reference internal\" href=\"#header\" id=\"id4\">Header</a><ul>\n<li><a class=\"reference internal\" href=\"#card-object-and-card-lists\" id=\"id5\">Card object and card lists</a></li>\n<li><a class=\"reference internal\" href=\"#creating-a-new-header\" id=\"id6\">Creating a new header</a></li>\n</ul></li>\n<li><a class=\"reference internal\" href=\"#data\" id=\"id7\">Data</a><ul>\n<li><a class=\"reference internal\" href=\"#image-data\" id=\"id8\">Image data</a></li>\n<li><a class=\"reference internal\" href=\"#tables\" id=\"id9\">Tables</a></li>\n<li><a class=\"reference internal\" href=\"#creating-a-new-fits-table\" id=\"id10\">Creating a new FITS table</a></li>\n</ul></li>\n<li><a class=\"reference internal\" href=\"#finally\" id=\"id11\">Finally</a></li>\n</ul>\n</div><div class=\"section\" id=\"hdulist\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id2\" style=\"text-decoration: none; color: black; \">HDUList</a></h1><p>PyFITS treats a FITS file as a collection of\u00a0</p></div></strong><strong>HDU objects</strong>, each of which represents a FITS HDU. The function\u00a0<tt class=\"docutils literal\">pyfits.open</tt>\u00a0returns an\u00a0<strong>HDUList</strong>\u00a0object, which is a collection of all the HDU objects in the FITS file.<div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdulist <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>open(<span style=\"color: #ba2121; \">\"WFPC2u5780205r_c0fx.fits\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">type</span>(hdulist)\n<span style=\"color: #666666; \">&lt;</span><span style=\"color: #008000; font-weight: bold; \">class</span> <span style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: #ff0000; border-right-color: #ff0000; border-bottom-color: #ff0000; border-left-color: #ff0000; \">'</span><span style=\"color: #0000ff; font-weight: bold; \">pyfits</span><span style=\"color: #666666; \">.</span>core<span style=\"color: #666666; \">.</span>HDUList<span style=\"color: #ba2121; \">'&gt;</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">len</span>(hdulist)\n<span style=\"color: #666666; \">2</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdulist<span style=\"color: #666666; \">.</span>info()\nFilename: WFPC2u5780205r_c0fx<span style=\"color: #666666; \">.</span>fits\nNo<span style=\"color: #666666; \">.</span>  Name     Type   Cards  Dimensions  Format\n<span style=\"color: #666666; \">0</span>  PRIMARY   PrimaryHDU   <span style=\"color: #666666; \">262</span> (<span style=\"color: #666666; \">200</span>, <span style=\"color: #666666; \">200</span>, <span style=\"color: #666666; \">4</span>) float32\n<span style=\"color: #666666; \">1</span>  U5780205R_CVT<span style=\"color: #666666; \">.</span>C0H<span style=\"color: #666666; \">.</span>TAB TableHDU    <span style=\"color: #666666; \">353</span> <span style=\"color: #666666; \">4</span>R x <span style=\"color: #666666; \">49</span>C [<span style=\"color: #ba2121; \">'D25.17'</span>,\n <span style=\"color: #ba2121; \">'D25.17'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>,\n <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'A1'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'D25.17'</span>,\n <span style=\"color: #ba2121; \">'D25.17'</span>, <span style=\"color: #ba2121; \">'A8'</span>, <span style=\"color: #ba2121; \">'A8'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>,\n <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'I12'</span>,\n <span style=\"color: #ba2121; \">'I12'</span>, <span style=\"color: #ba2121; \">'A48'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>,\n <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>,\n <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>, <span style=\"color: #ba2121; \">'E15.7'</span>]\n</pre></div><p>This function takes a parameter,\u00a0<tt class=\"docutils literal\">mode</tt>, that will set the mode in which the file is opened, based on the string passed as its value:</p><blockquote><table border=\"1\" class=\"docutils\" style=\"margin-top: 0.5em; margin-bottom: 0.5em; \"><colgroup><col width=\"54%\"></col><col width=\"46%\"></col></colgroup><thead valign=\"bottom\"><tr><th class=\"head\" style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">mode string</th><th class=\"head\" style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">file mode</th></tr></thead><tbody valign=\"top\"><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">copyonwrite</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">rb</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">readonly</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">rb</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">update</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">rb+</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">append</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">ab+</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">ostream</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">w</td></tr></tbody></table></blockquote><p>If we plan to modify the file then it should be opened with the appropriate mode string passed to\u00a0<tt class=\"docutils literal\">pyfits.open</tt>, using the\u00a0<tt class=\"docutils literal\">mode</tt>\u00a0parameter.</p><div class=\"section\" id=\"hdu-object\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id3\" style=\"text-decoration: none; color: black; \">HDU object</a></h1><p>To access an HDU object in the HDUList, treat the latter as a list or as a dictionary with the extension names as keys.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdu0 <span style=\"color: #666666; \">=</span> hdulist[<span style=\"color: #666666; \">0</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">type</span>(hdu0)\n<span style=\"color: #666666; \">&lt;</span><span style=\"color: #008000; font-weight: bold; \">class</span> <span style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: #ff0000; border-right-color: #ff0000; border-bottom-color: #ff0000; border-left-color: #ff0000; \">'</span><span style=\"color: #0000ff; font-weight: bold; \">pyfits</span><span style=\"color: #666666; \">.</span>core<span style=\"color: #666666; \">.</span>PrimaryHDU<span style=\"color: #ba2121; \">'&gt;</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">for</span> i <span style=\"color: #aa22ff; font-weight: bold; \">in</span> hdulist: <span style=\"color: #008000; font-weight: bold; \">print</span> i<span style=\"color: #666666; \">.</span>name\n<span style=\"color: #666666; \">....</span>\nPRIMARY\nU5780205R_CVT<span style=\"color: #666666; \">.</span>C0H<span style=\"color: #666666; \">.</span>TAB\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">del</span> i\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdulist[<span style=\"color: #ba2121; \">'primary'</span>] <span style=\"color: #aa22ff; font-weight: bold; \">is</span> hdulist[<span style=\"color: #666666; \">0</span>]\n<span style=\"color: #008000; \">True</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdulist[<span style=\"color: #ba2121; \">'u5780205r_cvt.c0h.tab'</span>] <span style=\"color: #aa22ff; font-weight: bold; \">is</span> hdulist[<span style=\"color: #666666; \">1</span>]\n<span style=\"color: #008000; \">True</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdu1 <span style=\"color: #666666; \">=</span> hdulist[<span style=\"color: #666666; \">1</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">type</span>(hdu1)\n<span style=\"color: #666666; \">&lt;</span><span style=\"color: #008000; font-weight: bold; \">class</span> <span style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: #ff0000; border-right-color: #ff0000; border-bottom-color: #ff0000; border-left-color: #ff0000; \">'</span><span style=\"color: #0000ff; font-weight: bold; \">pyfits</span><span style=\"color: #666666; \">.</span>core<span style=\"color: #666666; \">.</span>TableHDU<span style=\"color: #ba2121; \">'&gt;</span>\n</pre></div><p>An HDU object has a\u00a0<tt class=\"docutils literal\">header</tt>\u00a0attribute and a\u00a0<tt class=\"docutils literal\">data</tt>\u00a0attribute, which contain the FITS header and data, respectively, of the FITS HDU.</p></div><div class=\"section\" id=\"header\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id4\" style=\"text-decoration: none; color: black; \">Header</a></h1><p>The header of an extension is stored in the\u00a0<tt class=\"docutils literal\">header</tt>\u00a0attribute of the corresponding HDU object.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header0 <span style=\"color: #666666; \">=</span> hdu0<span style=\"color: #666666; \">.</span>header\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1 <span style=\"color: #666666; \">=</span> hdu1<span style=\"color: #666666; \">.</span>header\n</pre></div><p>In PyFITS, a header is a dictionary like object with FITS keywords as keys. A header can also be treated like a list. This feature is needed to access keywords that can occur multiple times in a header, for example\u00a0<tt class=\"docutils literal\">COMMENT</tt>; dictionary syntax will extract only the first occurrence. Headers support only simple indexing, i.e., no slices.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header0<span style=\"color: #666666; \">.</span>keys()\n[<span style=\"color: #ba2121; \">'SIMPLE'</span>,\n<span style=\"color: #ba2121; \">'BITPIX'</span>,\n<span style=\"color: #ba2121; \">'NAXIS'</span>,\n<span style=\"color: #ba2121; \">'NAXIS1'</span>,\n<span style=\"color: #ba2121; \">'NAXIS2'</span>,\n<span style=\"color: #ba2121; \">'NAXIS3'</span>,\n<span style=\"color: #ba2121; \">'EXTEND'</span>,\n<span style=\"color: #ba2121; \">'COMMENT'</span>,\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>keys()\n[<span style=\"color: #ba2121; \">'XTENSION'</span>,\n<span style=\"color: #ba2121; \">'BITPIX'</span>,\n<span style=\"color: #ba2121; \">'NAXIS'</span>,\n<span style=\"color: #ba2121; \">'NAXIS1'</span>,\n<span style=\"color: #ba2121; \">'NAXIS2'</span>,\n<span style=\"color: #ba2121; \">'PCOUNT'</span>,\n<span style=\"color: #ba2121; \">'GCOUNT'</span>,\n<span style=\"color: #ba2121; \">'TFIELDS'</span>,\n<span style=\"color: #ba2121; \">'EXTNAME'</span>,\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header0[<span style=\"color: #ba2121; \">'ra_targ'</span>]\n<span style=\"color: #666666; \">182.63550000000001</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header0[<span style=\"color: #ba2121; \">'gal_long'</span>]\n<span style=\"color: #666666; \">155.079532</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1[<span style=\"color: #ba2121; \">'NAXIS'</span>]\n<span style=\"color: #666666; \">2</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1[<span style=\"color: #ba2121; \">'naxis'</span>] <span style=\"color: #408080; font-style: italic; \"># Case insensitive</span>\n<span style=\"color: #666666; \">2</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1[<span style=\"color: #ba2121; \">'naxis2'</span>]\n<span style=\"color: #666666; \">4</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1[<span style=\"color: #ba2121; \">'tfields'</span>]\n<span style=\"color: #666666; \">49</span>\n</pre></div><p>Keyword values in a header can be changed, and new keywords can be added using the\u00a0<tt class=\"docutils literal\">update</tt>\u00a0method of the\u00a0<tt class=\"docutils literal\">header</tt>:</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>update(<span style=\"color: #ba2121; \">\"Author\"</span>, <span style=\"color: #ba2121; \">\"I Me Myself\"</span>, <span style=\"color: #ba2121; \">\"Name\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1[<span style=\"color: #ba2121; \">'author'</span>]\n<span style=\"color: #ba2121; \">'I Me Myself'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">del</span> header1[<span style=\"color: #ba2121; \">'author'</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1[<span style=\"color: #ba2121; \">'author'</span>]\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #d2413a; font-weight: bold; \">KeyError</span>: <span style=\"color: #ba2121; \">\"Keyword 'author' not found.\"</span>\n</pre></div><p>The changes occur only in memory and so, in order to make the changes permanent, the FITS file must be written to disk.</p><p>To add new\u00a0<tt class=\"docutils literal\">HISTORY</tt>,\u00a0<tt class=\"docutils literal\">COMMENT</tt>\u00a0and blank records use the appropriately named methods of the header object. Blank records will be placed at the end of the header, while<tt class=\"docutils literal\">COMMENT</tt>\u00a0and\u00a0<tt class=\"docutils literal\">HISTORY</tt>\u00a0records will be placed immediately after the last occurrence of the keyword, unless an explicit position is given.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>add_history(<span style=\"color: #ba2121; \">\"Changing history\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>add_blank(<span style=\"color: #ba2121; \">\"A blank record. No keyword\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>add_comment(<span style=\"color: #ba2121; \">\"A new comment line.\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>add_comment(<span style=\"color: #ba2121; \">\"Some comment\"</span>, before<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">'histwide'</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>add_comment(<span style=\"color: #ba2121; \">\"Some more\"</span>, after<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">'skewness'</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>keys()\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #ba2121; \">'MEDSHADO'</span>,\n<span style=\"color: #ba2121; \">'COMMENT'</span>,\n<span style=\"color: #ba2121; \">'HISTWIDE'</span>,\n<span style=\"color: #ba2121; \">'SKEWNESS'</span>,\n<span style=\"color: #ba2121; \">'MEANC10'</span>,\n<span style=\"color: #ba2121; \">'MEANC25'</span>\n<span style=\"color: #666666; \">...</span>\n</pre></div><p>The\u00a0<tt class=\"docutils literal\">before</tt>\u00a0and\u00a0<tt class=\"docutils literal\">after</tt>\u00a0argument can also be integers, in which case they will be used as list index numbers.</p><p>From the above output, we can see that only the first\u00a0<tt class=\"docutils literal\">COMMENT</tt>\u00a0record can be accessed using a dictionary key. To see that we have indeed added a second\u00a0<tt class=\"docutils literal\">COMMENT</tt>\u00a0record after the\u00a0<tt class=\"docutils literal\">SKEWNESS</tt>\u00a0record , we can print the header or use the\u00a0<tt class=\"docutils literal\">get_comment</tt>\u00a0method of the header object. The latter returns all the\u00a0<tt class=\"docutils literal\">COMMENT</tt>\u00a0records as a list of strings. The method\u00a0<tt class=\"docutils literal\">get_history</tt>\u00a0extracts all\u00a0<tt class=\"docutils literal\">HISTORY</tt>\u00a0records.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> header1\n<span style=\"color: #666666; \">...</span>\nMEDSHADO<span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'median pixel value in shadow of pyramid edge'</span> <span style=\"color: #666666; \">/</span>\nCOMMENT Some comment\nHISTWIDE<span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'width of the histogram'</span> <span style=\"color: #666666; \">/</span>\nSKEWNESS<span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'skewness of the histogram'</span> <span style=\"color: #666666; \">/</span>\nCOMMENT Some more\nMEANC10 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'mean of a 10x10 region at center of chip'</span> <span style=\"color: #666666; \">/</span>\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1<span style=\"color: #666666; \">.</span>get_comment()\n[<span style=\"color: #ba2121; \">\" FITS (Flexible Image Transport System) format is defined in 'Astronomy\"</span>,\n<span style=\"color: #ba2121; \">\" and Astrophysics', volume 376, page 359; bibcode: 2001A&amp;A...376..359H\"</span>,\n<span style=\"color: #ba2121; \">'A new comment line.'</span>,\n<span style=\"color: #ba2121; \">'Some comment'</span>,\n<span style=\"color: #ba2121; \">'Some more'</span>]\n</pre></div><p>The following code can be used to find the position of a\u00a0<tt class=\"docutils literal\">COMMENT</tt>\u00a0card in a\u00a0<tt class=\"docutils literal\">Card List</tt>. The\u00a0<tt class=\"docutils literal\">ascardlist</tt>\u00a0method is explained in the\u00a0<a class=\"reference internal\" href=\"#card-object-and-card-lists\">Card object and card lists</a>\u00a0section:</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">for</span> i, card <span style=\"color: #aa22ff; font-weight: bold; \">in</span> <span style=\"color: #008000; \">enumerate</span>(header1<span style=\"color: #666666; \">.</span>ascardlist()):\n <span style=\"color: #666666; \">....</span>:   <span style=\"color: #008000; font-weight: bold; \">if</span> card<span style=\"color: #666666; \">.</span>key <span style=\"color: #666666; \">==</span> <span style=\"color: #ba2121; \">'COMMENT'</span>:\n <span style=\"color: #666666; \">....</span>:     <span style=\"color: #008000; font-weight: bold; \">print</span> i, card<span style=\"color: #666666; \">.</span>key, card<span style=\"color: #666666; \">.</span>value, card<span style=\"color: #666666; \">.</span>comment\n <span style=\"color: #666666; \">....</span>:\n <span style=\"color: #666666; \">....</span>:\n<span style=\"color: #666666; \">7</span> COMMENT  FITS (Flexible Image Transport System) format <span style=\"color: #aa22ff; font-weight: bold; \">is</span> defined <span style=\"color: #aa22ff; font-weight: bold; \">in</span> <span style=\"color: #ba2121; \">'Astronomy</span>\n<span style=\"color: #666666; \">8</span> COMMENT  <span style=\"color: #aa22ff; font-weight: bold; \">and</span> Astrophysics<span style=\"color: #ba2121; \">', volume 376, page 359; bibcode: 2001A&amp;A...376..359H</span>\n<span style=\"color: #666666; \">9</span> COMMENT A new comment line<span style=\"color: #666666; \">.</span>\n<span style=\"color: #666666; \">60</span> COMMENT Some comment\n<span style=\"color: #666666; \">63</span> COMMENT Some more\n</pre></div><p>To get all the blank records we can check to see if a card object in a card list has a blank key:</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">for</span> i, card <span style=\"color: #aa22ff; font-weight: bold; \">in</span> <span style=\"color: #008000; \">enumerate</span>(header1<span style=\"color: #666666; \">.</span>ascardlist()):\n<span style=\"color: #666666; \">....</span>:  <span style=\"color: #008000; font-weight: bold; \">if</span> card<span style=\"color: #666666; \">.</span>key <span style=\"color: #666666; \">==</span> <span style=\"color: #ba2121; \">\"\"</span>:\n<span style=\"color: #666666; \">....</span>:    <span style=\"color: #008000; font-weight: bold; \">print</span> i, card<span style=\"color: #666666; \">.</span>value, card<span style=\"color: #666666; \">.</span>comment\n<span style=\"color: #666666; \">....</span>:\n<span style=\"color: #666666; \">75</span>\n<span style=\"color: #666666; \">79</span>\n<span style=\"color: #666666; \">80</span>    <span style=\"color: #666666; \">/</span> WFPC<span style=\"color: #666666; \">-</span>II DATA DESCRIPTOR KEYWORDS\n<span style=\"color: #666666; \">81</span>\n<span style=\"color: #666666; \">86</span>\n<span style=\"color: #666666; \">87</span>    <span style=\"color: #666666; \">/</span> SCIENCE INSTRUMENT CONFIGURATION\n<span style=\"color: #666666; \">88</span>\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">185</span>\n<span style=\"color: #666666; \">192</span>\n<span style=\"color: #666666; \">193</span>    <span style=\"color: #666666; \">/</span> EXPOSURE INFORMATION\n<span style=\"color: #666666; \">194</span>\n<span style=\"color: #666666; \">199</span>\n<span style=\"color: #666666; \">206</span>\n<span style=\"color: #666666; \">207</span>    <span style=\"color: #666666; \">/</span> TARGET <span style=\"color: #666666; \">&amp;</span> PROPOSAL ID\n<span style=\"color: #666666; \">215</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> data_header_cards[<span style=\"color: #666666; \">205</span>:<span style=\"color: #666666; \">210</span>]\nEXPFLAG <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'NORMAL    '</span>   <span style=\"color: #666666; \">/</span> Exposure interruption indicator\n\n       <span style=\"color: #666666; \">/</span> TARGET <span style=\"color: #666666; \">&amp;</span> PROPOSAL ID\nTARGNAME<span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'NGC4151            '</span> <span style=\"color: #666666; \">/</span> proposer<span style=\"color: #ba2121; \">'s target name</span>\nRA_TARG <span style=\"color: #666666; \">=</span>  <span style=\"color: #666666; \">1.826355000000E+02</span> <span style=\"color: #666666; \">/</span> right ascension of the target (deg) (J2000)\n</pre></div><div class=\"section\" id=\"card-object-and-card-lists\"><h2><a class=\"toc-backref\" href=\"#id5\" style=\"text-decoration: none; color: black; \">Card object and card lists</a></h2><p>A header itself consists of\u00a0<strong>Card Objects</strong>, each representing a record in the FITS header. The list of card object in a header can be obtained using the\u00a0<tt class=\"docutils literal\">ascardlist</tt>\u00a0function of the header object.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_list <span style=\"color: #666666; \">=</span> header1<span style=\"color: #666666; \">.</span>ascardlist()\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">len</span>(card_list)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> cardlist<span style=\"color: #666666; \">.</span>keys()\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">type</span>(card_list)\n<span style=\"color: #666666; \">&lt;</span><span style=\"color: #008000; font-weight: bold; \">class</span> <span style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: #ff0000; border-right-color: #ff0000; border-bottom-color: #ff0000; border-left-color: #ff0000; \">'</span><span style=\"color: #0000ff; font-weight: bold; \">pyfits</span><span style=\"color: #666666; \">.</span>core<span style=\"color: #666666; \">.</span>CardList<span style=\"color: #ba2121; \">'&gt;</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_list[<span style=\"color: #ba2121; \">'BITPIX'</span>]\nBITPIX <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">8</span> <span style=\"color: #666666; \">/</span> <span style=\"color: #666666; \">8-</span>bits per <span style=\"color: #ba2121; \">'pixels'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_list[<span style=\"color: #666666; \">1</span>]\nBITPIX <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">8</span> <span style=\"color: #666666; \">/</span> <span style=\"color: #666666; \">8-</span>bits per <span style=\"color: #ba2121; \">'pixels'</span>\n</pre></div><p>Unlike the\u00a0<tt class=\"docutils literal\">Header</tt>\u00a0object, a card list supports list slicing:</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_list[<span style=\"color: #666666; \">0</span>:<span style=\"color: #666666; \">10</span>]<span style=\"color: #666666; \">.</span>keys()\n[<span style=\"color: #ba2121; \">'XTENSION'</span>,\n <span style=\"color: #ba2121; \">'BITPIX'</span>,\n <span style=\"color: #ba2121; \">'NAXIS'</span>,\n <span style=\"color: #ba2121; \">'NAXIS1'</span>,\n <span style=\"color: #ba2121; \">'NAXIS2'</span>,\n <span style=\"color: #ba2121; \">'PCOUNT'</span>,\n <span style=\"color: #ba2121; \">'GCOUNT'</span>,\n <span style=\"color: #ba2121; \">'TFIELDS'</span>,\n <span style=\"color: #ba2121; \">'EXTNAME'</span>,\n <span style=\"color: #ba2121; \">''</span>]\n</pre></div><p>The maximum length of a standard FITS keyword is 8 characters and each record can have a maximum of 80 characters. There are two keywords that can be used to overcome these limitations:\u00a0<tt class=\"docutils literal\">HIERARCH</tt>\u00a0and\u00a0<tt class=\"docutils literal\">CONTINUE</tt>. See pages 19 and 20 of the\u00a0<a class=\"reference external\" href=\"http://stsdas.stsci.edu/download/wikidocs/The_PyFITS_Handbook.pdf\">PyFITS Handbook</a>, for more information.</p><p>Each object in a card list is a\u00a0<strong>Card Image</strong>. A Card Image represents one FITS header record.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> a_card <span style=\"color: #666666; \">=</span> card_list[<span style=\"color: #666666; \">0</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">type</span>(a_card)\n<span style=\"color: #666666; \">&lt;</span><span style=\"color: #008000; font-weight: bold; \">class</span> <span style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: #ff0000; border-right-color: #ff0000; border-bottom-color: #ff0000; border-left-color: #ff0000; \">'</span><span style=\"color: #0000ff; font-weight: bold; \">pyfits</span><span style=\"color: #666666; \">.</span>core<span style=\"color: #666666; \">.</span>Card<span style=\"color: #ba2121; \">'&gt;</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> a_card\nXTENSION<span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'TABLE  '</span>      <span style=\"color: #666666; \">/</span> Ascii table extension\n</pre></div><p>A Card object has three main attributes:\u00a0<tt class=\"docutils literal\">key</tt>,\u00a0<tt class=\"docutils literal\">value</tt>\u00a0and\u00a0<tt class=\"docutils literal\">comment</tt>. They represent the keyword name, the value and the comment of the corresponding FITS record, respectively.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> a_card<span style=\"color: #666666; \">.</span>key\n<span style=\"color: #ba2121; \">'XTENSION'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> a_card<span style=\"color: #666666; \">.</span>value\n<span style=\"color: #ba2121; \">'TABLE'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> a_card<span style=\"color: #666666; \">.</span>comment\n<span style=\"color: #ba2121; \">'Ascii table extension'</span>\n</pre></div></div><div class=\"section\" id=\"creating-a-new-header\"><h2><a class=\"toc-backref\" href=\"#id6\" style=\"text-decoration: none; color: black; \">Creating a new header</a></h2><p>There are two ways of creating a new FITS header: create an empty header and use its\u00a0<tt class=\"docutils literal\">update</tt>\u00a0method to add records, or create a list of Card images and then create a header by passing this list to the\u00a0<tt class=\"docutils literal\">pyfits.Header</tt>\u00a0constructor.</p><p>The following illustrates the first method:</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_0 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Header()\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_0<span style=\"color: #666666; \">.</span>update(key<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"simple\"</span>, value<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"T\"</span>, comment<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"Conforms to standard\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_0<span style=\"color: #666666; \">.</span>update(key<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"bitpix\"</span>, value<span style=\"color: #666666; \">=32</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_0<span style=\"color: #666666; \">.</span>update(key<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"date\"</span>, value<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"2010-10-10\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_0<span style=\"color: #666666; \">.</span>update(key<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"origin\"</span>, value<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"kpno\"</span>, comment<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"2010B: Prj. X\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> header_0\nSIMPLE <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'T    '</span>      <span style=\"color: #666666; \">/</span> Conforms to standard\nBITPIX <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">32</span>\nDATE  <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'2010-10-10'</span>\nORIGIN <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'kpno  '</span>      <span style=\"color: #666666; \">/</span> <span style=\"color: #666666; \">2010</span>B: Prj<span style=\"color: #666666; \">.</span> X\n</pre></div><p>A Card object can be created using the\u00a0<tt class=\"docutils literal\">pyfits.Card</tt>\u00a0constructor. The constructor takes as arguments, a key, a value and a comment. Note that within PyFITS, keywords are case insensitive. Also, the constructor will check if the resultant FITS record is valid or not. If for some reason, we want to create non-conforming Cards, then use the<tt class=\"docutils literal\"><span class=\"pre\" style=\"white-space: pre; \">pyfits.Card().fromstring</span></tt>\u00a0method.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_0 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Card(<span style=\"color: #ba2121; \">\"simple\"</span>, <span style=\"color: #ba2121; \">\"T\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_1 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Card(<span style=\"color: #ba2121; \">\"bitpix', -32)</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_2 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Card(<span style=\"color: #ba2121; \">\"date\"</span>, <span style=\"color: #ba2121; \">\"2010-10-10\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_3 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Card(<span style=\"color: #ba2121; \">\"origin\"</span>, <span style=\"color: #ba2121; \">\"kpno\"</span>, <span style=\"color: #ba2121; \">\"2010B run for Prj. X\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_4 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Card(<span style=\"color: #ba2121; \">\"dddddddddddddddddddddd\"</span>,<span style=\"color: #ba2121; \">\"123\"</span>, <span style=\"color: #ba2121; \">\"222\"</span>)\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #d2413a; font-weight: bold; \">ValueError</span>: keyword name dddddddddddddddddddddd <span style=\"color: #aa22ff; font-weight: bold; \">is</span> too <span style=\"color: #008000; \">long</span> (<span style=\"color: #666666; \">&gt;</span> <span style=\"color: #666666; \">8</span>), use HIERARCH<span style=\"color: #666666; \">.</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> card_0\nSIMPLE <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'T    '</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> card_1\nBITPIX <span style=\"color: #666666; \">=</span>         <span style=\"color: #666666; \">-32</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> card_2\nDATE  <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'2010-10-10'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> card_3\nORIGIN <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'kpno  '</span>      <span style=\"color: #666666; \">/</span> <span style=\"color: #666666; \">2010</span>B: Prj<span style=\"color: #666666; \">.</span> X\n</pre></div><p>The\u00a0<tt class=\"docutils literal\">verify</tt>\u00a0method of a Card object can be used to verify that it conforms to the FITS standard.</p><p>If the header is going to be part of an extension, rather than the Primary HDU, then add the keyword \"XTENSION\", with value set to \"IMAGE\", \"TABLE\" or \"BINTABLE\", as appropriate.</p><p>Once we have a set of Cards, we can create a header by passing the list of Cards to the\u00a0<tt class=\"docutils literal\">pyfits.Header</tt>\u00a0constructor.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> card_list <span style=\"color: #666666; \">=</span> [card_0, card_1, card_2, card_3]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_0 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Header(cards<span style=\"color: #666666; \">=</span>card_list)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> header_0\nSIMPLE <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'T '</span>\nBITPIX <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">-32</span>\nDATE <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'2010-10-10'</span>\nORIGIN <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'kpno '</span> <span style=\"color: #666666; \">/</span> <span style=\"color: #666666; \">2010</span>B: Prj<span style=\"color: #666666; \">.</span> X\n</pre></div></div></div><div class=\"section\" id=\"data\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id7\" style=\"text-decoration: none; color: black; \">Data</a></h1><p>As mentioned before, a FITS HDU consists of a data part and a header part. The data part can be accessed through the\u00a0<tt class=\"docutils literal\">data</tt>\u00a0attribute of a HDU object. In the Primary HDU and extensions with\u00a0<tt class=\"docutils literal\">XTENSION = IMAGE</tt>, the data part can be a multi-dimensional array. Extensions with\u00a0<tt class=\"docutils literal\">XTENSION = TABLE</tt>\u00a0and\u00a0<tt class=\"docutils literal\">XTENSION = BINTABLE</tt>, will contain tabular data in ASCII and binary formats, respectively.</p><div class=\"section\" id=\"image-data\"><h2><a class=\"toc-backref\" href=\"#id8\" style=\"text-decoration: none; color: black; \">Image data</a></h2><p>Image data consists of a multi-dimensional array, and can occur as the data part of the Primary HDU or an extension HDU with\u00a0<tt class=\"docutils literal\">XTENSION = IMAGE</tt>. In PyFITS the image data is stored as numpy arrays. The dimensions and data type of this array must match the appropriate keywords in the header.</p><p>To create a Primary HDU with image data we can use the\u00a0<tt class=\"docutils literal\">pyfits.PrimaryHDU</tt>\u00a0constructor.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> data <span style=\"color: #666666; \">=</span> numpy<span style=\"color: #666666; \">.</span>zeros((<span style=\"color: #666666; \">2</span>,<span style=\"color: #666666; \">4</span>,<span style=\"color: #666666; \">3</span>), dtype<span style=\"color: #666666; \">=</span>numpy<span style=\"color: #666666; \">.</span>float64)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> primary_hdu <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>PrimaryHDU(data<span style=\"color: #666666; \">=</span>data, header<span style=\"color: #666666; \">=</span>header_0)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> primary_hdu<span style=\"color: #666666; \">.</span>header\nSIMPLE <span style=\"color: #666666; \">=</span> T <span style=\"color: #666666; \">/</span> conforms to FITS standard\nBITPIX <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">-64</span> <span style=\"color: #666666; \">/</span> array data <span style=\"color: #008000; \">type</span>\nNAXIS <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">3</span> <span style=\"color: #666666; \">/</span> number of array dimensions\nNAXIS1 <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">3</span>\nNAXIS2 <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">4</span>\nNAXIS3 <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">2</span>\nDATE <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'2010-10-10'</span>\nORIGIN <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'kpno '</span> <span style=\"color: #666666; \">/</span> <span style=\"color: #666666; \">2010</span>B: Prj<span style=\"color: #666666; \">.</span> X\n</pre></div><p>The header,\u00a0<tt class=\"docutils literal\">header_0</tt>, is the same as that in the\u00a0<a class=\"reference internal\" href=\"#creating-a-new-header\">creating a new header</a>\u00a0section of this document; PyFITS has automatically changed the\u00a0<tt class=\"docutils literal\">BITPIX</tt>\u00a0value to reflect the actual data type, and has also inserted the\u00a0<tt class=\"docutils literal\">NAXIS</tt>\u00a0and\u00a0<tt class=\"docutils literal\">NAXISn</tt>\u00a0keywords to store information on the dimensions of the data. It has also added comments to the keyword\u00a0<tt class=\"docutils literal\">SIMPLE</tt>.</p><p>See page 22 of the\u00a0<a class=\"reference external\" href=\"http://stsdas.stsci.edu/download/wikidocs/The_PyFITS_Handbook.pdf\">PyFITS Handbook</a>\u00a0for information on how to handle \"scaled\" data. Page 24 of the document lists methods for working with large data sets.</p></div><div class=\"section\" id=\"tables\"><h2><a class=\"toc-backref\" href=\"#id9\" style=\"text-decoration: none; color: black; \">Tables</a></h2><p>The header associated with a table extension stores meta-data for the columns in a table, in addition to the regular FITS header records. Some of the metadata stored are:</p><blockquote><table border=\"1\" class=\"docutils\" style=\"margin-top: 0.5em; margin-bottom: 0.5em; \"><colgroup><col width=\"33%\"></col><col width=\"67%\"></col></colgroup><thead valign=\"bottom\"><tr><th class=\"head\" style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">FITS keyword</th><th class=\"head\" style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Property</th></tr></thead><tbody valign=\"top\"><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">NAXIS2</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Number of rows</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">TFIELDS</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Number of columns</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">TFORMn</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Format of data in column n</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">TTYPEn</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Name of column n</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">TUNITn</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Unit for data in column n</td></tr></tbody></table></blockquote><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdu_list <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>open(<span style=\"color: #ba2121; \">\"WFPC2u5780205r_c0fx.fits\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu <span style=\"color: #666666; \">=</span> hdu_list[<span style=\"color: #666666; \">1</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header <span style=\"color: #666666; \">=</span> table_hdu<span style=\"color: #666666; \">.</span>header\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header[<span style=\"color: #ba2121; \">'tfields'</span>]\n<span style=\"color: #666666; \">49</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header[<span style=\"color: #ba2121; \">'naxis2'</span>]\n<span style=\"color: #666666; \">4</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header[<span style=\"color: #ba2121; \">'tform1'</span>]\n<span style=\"color: #ba2121; \">'D25.17'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header[<span style=\"color: #ba2121; \">'tform2'</span>]\n<span style=\"color: #ba2121; \">'D25.17'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header[<span style=\"color: #ba2121; \">'tform3'</span>]\n<span style=\"color: #ba2121; \">'E15.7'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header[<span style=\"color: #ba2121; \">'ttype1'</span>]\n<span style=\"color: #ba2121; \">'CRVAL1'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header[<span style=\"color: #ba2121; \">'ttype2'</span>]\n<span style=\"color: #ba2121; \">'CRVAL2'</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_header[<span style=\"color: #ba2121; \">'ttype3'</span>]\n<span style=\"color: #ba2121; \">'CRPIX1'</span>\n</pre></div><p>A table HDU object has a property\u00a0<tt class=\"docutils literal\">columns</tt>, which gives the properties of the columns in the table; this object is a\u00a0<tt class=\"docutils literal\">ColDefs</tt>\u00a0object. A table column stores several properties that describe the data in it:\u00a0<tt class=\"docutils literal\">name</tt>,\u00a0<tt class=\"docutils literal\">format</tt>,\u00a0<tt class=\"docutils literal\">unit</tt>, a display format\u00a0<tt class=\"docutils literal\">disp</tt>,\u00a0<tt class=\"docutils literal\">null</tt>\u00a0values, the data\u00a0<tt class=\"docutils literal\">array</tt>\u00a0and others. Of these, only\u00a0<tt class=\"docutils literal\">format</tt>\u00a0is mandatory.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>columns\nColDefs(name <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'CRVAL1'</span>\nformat <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'D25.17'</span>\nunit <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">' '</span>\ndisp <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'G25.16'</span>\nstart <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">1</span>, name <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'CRVAL2'</span>\nformat <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'D25.17'</span>\nunit <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">' '</span>\ndisp <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'G25.16'</span>\nstart <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">27</span>, name <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'CRPIX1'</span>\nformat <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'E15.7'</span>\nunit <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">' '</span>\ndisp <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'G15.7'</span>\nstart <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">53</span>, name <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'CRPIX2'</span>\n<span style=\"color: #666666; \">...</span>\n</pre></div><p>Data in tables, both ASCII and binary tables, are stored using a data type similar to\u00a0<a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy-1.5.x/reference/generated/numpy.recarray.html\">numpy record array</a>s. The data part of the table has several properties that can be used to extract rows and columns from the table.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_data <span style=\"color: #666666; \">=</span> table_hdu<span style=\"color: #666666; \">.</span>data\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_data<span style=\"color: #666666; \">.</span>field(<span style=\"color: #666666; \">0</span>) <span style=\"color: #408080; font-style: italic; \"># First column</span>\narray([ <span style=\"color: #666666; \">182.63118863</span>, <span style=\"color: #666666; \">182.62552336</span>, <span style=\"color: #666666; \">182.65237923</span>, <span style=\"color: #666666; \">182.65002236</span>])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>names\n[<span style=\"color: #ba2121; \">'CRVAL1'</span>,\n<span style=\"color: #ba2121; \">'CRVAL2'</span>,\n<span style=\"color: #ba2121; \">'CRPIX1'</span>,\n<span style=\"color: #ba2121; \">'CRPIX2'</span>,\n<span style=\"color: #ba2121; \">'CD1_1'</span>,\n<span style=\"color: #ba2121; \">'CD1_2'</span>,\n<span style=\"color: #ba2121; \">'CD2_1'</span>,\n<span style=\"color: #ba2121; \">'CD2_2'</span>,\n<span style=\"color: #ba2121; \">'DATAMIN'</span>,\n<span style=\"color: #ba2121; \">'DATAMAX'</span>,\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #ba2121; \">'MEANC100'</span>,\n<span style=\"color: #ba2121; \">'MEANC200'</span>,\n<span style=\"color: #ba2121; \">'MEANC300'</span>,\n<span style=\"color: #ba2121; \">'BACKGRND'</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_data<span style=\"color: #666666; \">.</span>field(<span style=\"color: #ba2121; \">'crval1'</span>) <span style=\"color: #408080; font-style: italic; \"># Column named 'crval1'</span>\narray([ <span style=\"color: #666666; \">182.63118863</span>, <span style=\"color: #666666; \">182.62552336</span>, <span style=\"color: #666666; \">182.65237923</span>, <span style=\"color: #666666; \">182.65002236</span>])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_data[<span style=\"color: #ba2121; \">'crval1'</span>] <span style=\"color: #408080; font-style: italic; \"># Column named 'crval1'</span>\narray([ <span style=\"color: #666666; \">182.63118863</span>, <span style=\"color: #666666; \">182.62552336</span>, <span style=\"color: #666666; \">182.65237923</span>, <span style=\"color: #666666; \">182.65002236</span>])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_data[<span style=\"color: #666666; \">0</span>] <span style=\"color: #408080; font-style: italic; \"># First row</span>\n(<span style=\"color: #666666; \">182.63118863080001</span>, <span style=\"color: #666666; \">39.396336734110001</span>, <span style=\"color: #666666; \">420.0</span>, <span style=\"color: #666666; \">424.5</span>,\n<span style=\"color: #666666; \">...</span>\n)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_data[<span style=\"color: #666666; \">0</span>][<span style=\"color: #ba2121; \">'crval1'</span>] <span style=\"color: #408080; font-style: italic; \"># First row of column 'crval1'</span>\n<span style=\"color: #666666; \">182.63118863080001</span>\n</pre></div><p>Some differences between ASCII and binary tables are as follows:</p><ul class=\"simple\" style=\"margin-bottom: 1em; \"><li>Binary tables can hold all data types allowed in the FITS standard. ASCII tables can only have characters, integers and floating point numbers. It cannot have Boolean and complex numbers.</li>\n<li>The value in an ASCII table cell must be a scalar. In binary tables, a cell can contain an array.</li>\n<li>The\u00a0<tt class=\"docutils literal\">TFORMn</tt>\u00a0values differ for ASCII and binary tables.</li>\n</ul>\n<p>The keyword\u00a0<tt class=\"docutils literal\">TFORMn</tt>\u00a0indicates the format of the data stored in column number n.</p><p>Format codes for ASCII tables:</p><blockquote><table border=\"1\" class=\"docutils\" style=\"margin-top: 0.5em; margin-bottom: 0.5em; \"><colgroup><col width=\"18%\"></col><col width=\"82%\"></col></colgroup><tbody valign=\"top\"><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Aw</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Character string of width w; w is an integer</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Iw</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Integers</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Fw.d</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">32-bit floating point number</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Ew.d, Dw.d</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">64-bit floating point number, in exponential notation</td></tr></tbody></table></blockquote><p>Format codes for binary tables:</p><blockquote><table border=\"1\" class=\"docutils\" style=\"margin-top: 0.5em; margin-bottom: 0.5em; \"><colgroup><col width=\"18%\"></col><col width=\"82%\"></col></colgroup><tbody valign=\"top\"><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">L</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Boolean of length 1 byte</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">B</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Unsigned byte</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">I, J, K</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">16-bit, 32-bit and 64-bit integers, respectively</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">A</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Characters</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">E, D</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">32-bit and 64-bit floating point numbers, respectively</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">C, M</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">32-bit and 64-bit complex numbers, respectively</td></tr></tbody></table></blockquote><p>For binary tables, an integer preceding the format codes for numerical types sets the length of data in each cell; a number greater than 1 indicates that the each cell holds a multidimensional data array. An integer preceding or succeeding 'A' indicates the length of the string in each cell of the column.</p></div><div class=\"section\" id=\"creating-a-new-fits-table\"><h2><a class=\"toc-backref\" href=\"#id10\" style=\"text-decoration: none; color: black; \">Creating a new FITS table</a></h2><p>Creating a new FITS table involves creating several\u00a0<tt class=\"docutils literal\">Column</tt>\u00a0objects, creating a\u00a0<tt class=\"docutils literal\">ColDefs</tt>\u00a0object using these and then creating a\u00a0<tt class=\"docutils literal\">TableHDU</tt>\u00a0or a\u00a0<tt class=\"docutils literal\">BinTableHDU</tt>\u00a0using the<tt class=\"docutils literal\">ColDefs</tt>\u00a0object. Since tables can only be present in FITS extensions, an\u00a0<tt class=\"docutils literal\">HDUList</tt>\u00a0is created containing a\u00a0<tt class=\"docutils literal\">PrimaryHDU</tt>\u00a0and the table HDU. The resulting\u00a0<tt class=\"docutils literal\">HDUList</tt>\u00a0can then be written onto the disk. Headers can be provided explicitly; if not present PyFITS will insert a header with appropriate keywords for the table HDU.</p><p>In the following example, we will create a binary table with 3 columns with names \"target\", \"counts\", and \"spectrum\". The \"target\" column will hold names of objects; a name will be a string of maximum 10 characters. The \"counts\" column will hold 32 bit integer numbers. Each cell in the \"spectrum\" column will hold an array of 1000 floating point numbers. The table will hold data for 4 objects, i.e., 4 rows. We will name the table \"MYTAB\", which will be stored in the header keyword\u00a0<tt class=\"docutils literal\">EXTNAME</tt>.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> targets <span style=\"color: #666666; \">=</span> numpy<span style=\"color: #666666; \">.</span>array([<span style=\"color: #ba2121; \">'ngc1'</span>, <span style=\"color: #ba2121; \">'ngc2'</span>, <span style=\"color: #ba2121; \">'ngc3'</span>, <span style=\"color: #ba2121; \">'ngc4'</span>])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> counts <span style=\"color: #666666; \">=</span> numpy<span style=\"color: #666666; \">.</span>array([<span style=\"color: #666666; \">312</span>, <span style=\"color: #666666; \">334</span>, <span style=\"color: #666666; \">308</span>, <span style=\"color: #666666; \">317</span>])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> spectrum <span style=\"color: #666666; \">=</span> numpy<span style=\"color: #666666; \">.</span>ones((<span style=\"color: #666666; \">4</span>,<span style=\"color: #666666; \">1000</span>), dtype<span style=\"color: #666666; \">=</span>numpy<span style=\"color: #666666; \">.</span>float32)\n</pre></div><p>Each row in the\u00a0<tt class=\"docutils literal\">spectrum</tt>\u00a0array, in the code fragment above, is the \"spectrum\" for an object.</p><p>PyFITS\u00a0<tt class=\"docutils literal\">Column</tt>\u00a0constructor is used to create columns. This constructor takes as argument a name for the column, a format describing the format of the data and the data array itself.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> c1 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Column(name<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">'target'</span>, format<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">'10A'</span>, array<span style=\"color: #666666; \">=</span>targets)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> c2 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Column(name<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"counts\"</span>, format<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"J\"</span>, array<span style=\"color: #666666; \">=</span>counts)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> c3 <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>Column(name<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"spectrum\"</span>, format<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"1000E\"</span>, array<span style=\"color: #666666; \">=</span>spectrum)\n</pre></div><p>To create a new table we can use the\u00a0<tt class=\"docutils literal\">pyfits.new_table</tt>\u00a0function. This function will accept\u00a0<tt class=\"docutils literal\">ColDefs</tt>\u00a0object or a list of\u00a0<tt class=\"docutils literal\">Column</tt>\u00a0object. So we don't have to perform the intermediate step of creating a\u00a0<tt class=\"docutils literal\">ColDefs</tt>\u00a0object from\u00a0<tt class=\"docutils literal\">Column</tt>\u00a0object.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>new_table([c1, c2, c3])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>columns\nColDefs(name <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'target'</span>\nformat <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'10A'</span>, name <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'counts'</span>\nformat <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'J'</span>, name <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'spectrum'</span>\nformat <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'1000E'</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> table_hdu<span style=\"color: #666666; \">.</span>header\nXTENSION<span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'BINTABLE'</span>      <span style=\"color: #666666; \">/</span> binary table extension\nBITPIX <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">8</span> <span style=\"color: #666666; \">/</span> array data <span style=\"color: #008000; \">type</span>\nNAXIS  <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">2</span> <span style=\"color: #666666; \">/</span> number of array dimensions\nNAXIS1 <span style=\"color: #666666; \">=</span>         <span style=\"color: #666666; \">4014</span> <span style=\"color: #666666; \">/</span> length of dimension <span style=\"color: #666666; \">1</span>\nNAXIS2 <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">4</span> <span style=\"color: #666666; \">/</span> length of dimension <span style=\"color: #666666; \">2</span>\nPCOUNT <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">0</span> <span style=\"color: #666666; \">/</span> number of group parameters\nGCOUNT <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">1</span> <span style=\"color: #666666; \">/</span> number of groups\nTFIELDS <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">3</span> <span style=\"color: #666666; \">/</span> number of table fields\nTTYPE1 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'target '</span>\nTFORM1 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'10A   '</span> TTYPE2 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'counts '</span>\nTFORM2 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'J    '</span> TTYPE3 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'spectrum'</span>\nTFORM3 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'1000E  '</span> <span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>header[<span style=\"color: #ba2121; \">'naxis2'</span>] <span style=\"color: #408080; font-style: italic; \"># Number of rows</span>\n<span style=\"color: #666666; \">4</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>header[<span style=\"color: #ba2121; \">'naxis1'</span>] <span style=\"color: #408080; font-style: italic; \"># Number of bytes in a row = 10 + 4 + 4*1000</span>\n<span style=\"color: #666666; \">4014</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>header[<span style=\"color: #ba2121; \">'tfields'</span>] <span style=\"color: #408080; font-style: italic; \"># Number of columns</span>\n<span style=\"color: #666666; \">3</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>header[<span style=\"color: #ba2121; \">'tform1'</span>] <span style=\"color: #408080; font-style: italic; \"># Format of first column</span>\n<span style=\"color: #666666; \">10</span>A\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>header[<span style=\"color: #ba2121; \">'tform2'</span>] <span style=\"color: #408080; font-style: italic; \"># Format of second column</span>\nJ\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>header[<span style=\"color: #ba2121; \">'tform1'</span>] <span style=\"color: #408080; font-style: italic; \"># Format of third column</span>\n<span style=\"color: #666666; \">1000</span>E\n</pre></div><p>Note that PyFITS has automatically inserted the required keywords with proper values. By default the table created is a binary table; pass the keyword\u00a0<tt class=\"docutils literal\">tbtype</tt>\u00a0with value set to\u00a0<tt class=\"docutils literal\">TableHDU</tt>\u00a0to create ASCII tables. To add additional records to the header, we can use the\u00a0<tt class=\"docutils literal\">update</tt>\u00a0method of the header.</p><p>The\u00a0<tt class=\"docutils literal\">new_table</tt>\u00a0function takes a keyword parameter,\u00a0<tt class=\"docutils literal\">nrows</tt>, that can be used to specify the number of rows in a table. If we need to add more rows, we can create a new table with data from the existing table, and setting\u00a0<tt class=\"docutils literal\">nrows</tt>\u00a0to the desired value. The empty rows can then be filled in with data.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>new_table(table_hdu<span style=\"color: #666666; \">.</span>data, nrows<span style=\"color: #666666; \">=10</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> table_hdu<span style=\"color: #666666; \">.</span>header\nXTENSION<span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'BINTABLE'</span>      <span style=\"color: #666666; \">/</span> binary table extension\nBITPIX <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">8</span> <span style=\"color: #666666; \">/</span> array data <span style=\"color: #008000; \">type</span>\nNAXIS  <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">2</span> <span style=\"color: #666666; \">/</span> number of array dimensions\nNAXIS1 <span style=\"color: #666666; \">=</span>         <span style=\"color: #666666; \">4014</span> <span style=\"color: #666666; \">/</span> length of dimension <span style=\"color: #666666; \">1</span>\nNAXIS2 <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">10</span> <span style=\"color: #666666; \">/</span> length of dimension <span style=\"color: #666666; \">2</span>\nPCOUNT <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">0</span> <span style=\"color: #666666; \">/</span> number of group parameters\nGCOUNT <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">1</span> <span style=\"color: #666666; \">/</span> number of groups\nTFIELDS <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">3</span> <span style=\"color: #666666; \">/</span> number of table fields\nTTYPE1 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'target '</span>\nTFORM1 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'10A   '</span>\nTTYPE2 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'counts '</span>\nTFORM2 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'J    '</span>\nTTYPE3 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'spectrum'</span>\nTFORM3 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'1000E  '</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> table_hdu<span style=\"color: #666666; \">.</span>header[<span style=\"color: #ba2121; \">'naxis2'</span>]\n<span style=\"color: #666666; \">10</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> table_hdu<span style=\"color: #666666; \">.</span>data[<span style=\"color: #ba2121; \">'target'</span>]\n[<span style=\"color: #ba2121; \">'ngc1'</span> <span style=\"color: #ba2121; \">'ngc2'</span> <span style=\"color: #ba2121; \">'ngc3'</span> <span style=\"color: #ba2121; \">'ngc4'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>data[<span style=\"color: #666666; \">4</span>][<span style=\"color: #ba2121; \">'target'</span>] <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">\"ngc1\"</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> table_hdu<span style=\"color: #666666; \">.</span>data[<span style=\"color: #ba2121; \">'target'</span>]\n[<span style=\"color: #ba2121; \">'ngc1'</span> <span style=\"color: #ba2121; \">'ngc2'</span> <span style=\"color: #ba2121; \">'ngc3'</span> <span style=\"color: #ba2121; \">'ngc4'</span> <span style=\"color: #ba2121; \">'ngc5'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span> <span style=\"color: #ba2121; \">'0.0'</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>data[<span style=\"color: #666666; \">4</span>][<span style=\"color: #ba2121; \">'counts'</span>] <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">315</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> table_hdu<span style=\"color: #666666; \">.</span>data[<span style=\"color: #ba2121; \">'counts'</span>]\n[<span style=\"color: #666666; \">312</span> <span style=\"color: #666666; \">334</span> <span style=\"color: #666666; \">308</span> <span style=\"color: #666666; \">317</span> <span style=\"color: #666666; \">315</span>  <span style=\"color: #666666; \">0</span>  <span style=\"color: #666666; \">0</span>  <span style=\"color: #666666; \">0</span>  <span style=\"color: #666666; \">0</span>  <span style=\"color: #666666; \">0</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>data[<span style=\"color: #666666; \">4</span>][<span style=\"color: #ba2121; \">'spectrum'</span>] <span style=\"color: #666666; \">=</span> numpy<span style=\"color: #666666; \">.</span>random<span style=\"color: #666666; \">.</span>random(<span style=\"color: #666666; \">1000</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> table_hdu<span style=\"color: #666666; \">.</span>data[<span style=\"color: #666666; \">4</span>][<span style=\"color: #ba2121; \">'spectrum'</span>]\n[ <span style=\"color: #666666; \">7.87860215e-01</span>  <span style=\"color: #666666; \">5.22207081e-01</span>  <span style=\"color: #666666; \">4.59663749e-01</span>  <span style=\"color: #666666; \">2.55125035e-02</span>\n  <span style=\"color: #666666; \">1.91508323e-01</span>  <span style=\"color: #666666; \">9.30920959e-01</span>  <span style=\"color: #666666; \">7.40450263e-01</span>  <span style=\"color: #666666; \">6.01666987e-01</span>\n  <span style=\"color: #666666; \">7.82849014e-01</span>  <span style=\"color: #666666; \">8.67393970e-01</span>  <span style=\"color: #666666; \">7.16790557e-02</span>  <span style=\"color: #666666; \">5.63477933e-01</span>\n  <span style=\"color: #666666; \">...</span>\n  <span style=\"color: #666666; \">4.05643554e-03</span>  <span style=\"color: #666666; \">9.19736564e-01</span>  <span style=\"color: #666666; \">8.43929410e-01</span>  <span style=\"color: #666666; \">2.26114035e-01</span>\n  <span style=\"color: #666666; \">9.95179892e-01</span>  <span style=\"color: #666666; \">4.55000669e-01</span>  <span style=\"color: #666666; \">4.56752568e-01</span>  <span style=\"color: #666666; \">2.68411219e-01</span>]\n</pre></div><p>Since a table cannot be part of the Primary HDU, we create an empty Primary HDU and use it with the table HDU to create a FITS file.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> phdu <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>PrimaryHDU()\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> phdu<span style=\"color: #666666; \">.</span>header\nSIMPLE <span style=\"color: #666666; \">=</span>          T <span style=\"color: #666666; \">/</span> conforms to FITS standard\nBITPIX <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">8</span> <span style=\"color: #666666; \">/</span> array data <span style=\"color: #008000; \">type</span>\nNAXIS  <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">0</span> <span style=\"color: #666666; \">/</span> number of array dimensions\nEXTEND <span style=\"color: #666666; \">=</span>          T\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> table_hdu<span style=\"color: #666666; \">.</span>name <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">\"MyTab\"</span> <span style=\"color: #408080; font-style: italic; \"># EXTNAME header keyword</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> table_hdu<span style=\"color: #666666; \">.</span>header\nXTENSION<span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'BINTABLE'</span>      <span style=\"color: #666666; \">/</span> binary table extension\nBITPIX <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">8</span> <span style=\"color: #666666; \">/</span> array data <span style=\"color: #008000; \">type</span>\nNAXIS  <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">2</span> <span style=\"color: #666666; \">/</span> number of array dimensions\nNAXIS1 <span style=\"color: #666666; \">=</span>         <span style=\"color: #666666; \">4014</span> <span style=\"color: #666666; \">/</span> length of dimension <span style=\"color: #666666; \">1</span>\nNAXIS2 <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">10</span> <span style=\"color: #666666; \">/</span> length of dimension <span style=\"color: #666666; \">2</span>\nPCOUNT <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">0</span> <span style=\"color: #666666; \">/</span> number of group parameters\nGCOUNT <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">1</span> <span style=\"color: #666666; \">/</span> number of groups\nTFIELDS <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">3</span> <span style=\"color: #666666; \">/</span> number of table fields\nTTYPE1 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'target '</span>\nTFORM1 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'10A   '</span>\nTTYPE2 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'counts '</span>\nTFORM2 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'J    '</span>\nTTYPE3 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'spectrum'</span>\nTFORM3 <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'1000E  '</span>\nEXTNAME <span style=\"color: #666666; \">=</span> <span style=\"color: #ba2121; \">'MYTAB  '</span>      <span style=\"color: #666666; \">/</span> extension name\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdulist <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>HDUList([phdu, table_hdu])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdulist<span style=\"color: #666666; \">.</span>info()\nFilename: (No <span style=\"color: #008000; \">file</span> associated <span style=\"color: #008000; font-weight: bold; \">with</span> this HDUList)\nNo<span style=\"color: #666666; \">.</span>  Name     Type   Cards  Dimensions  Format\n<span style=\"color: #666666; \">0</span>  PRIMARY   PrimaryHDU    <span style=\"color: #666666; \">4</span> ()\n<span style=\"color: #666666; \">1</span>  MYTAB    BinTableHDU   <span style=\"color: #666666; \">15</span> <span style=\"color: #666666; \">10</span>R x <span style=\"color: #666666; \">3</span>C   [<span style=\"color: #ba2121; \">'10A'</span>, <span style=\"color: #ba2121; \">'J'</span>, <span style=\"color: #ba2121; \">'1000E'</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> hdulist<span style=\"color: #666666; \">.</span>writeto(<span style=\"color: #ba2121; \">'table.fits'</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>info(<span style=\"color: #ba2121; \">'table.fits'</span>)\nFilename: table<span style=\"color: #666666; \">.</span>fits\nNo<span style=\"color: #666666; \">.</span>  Name     Type   Cards  Dimensions  Format\n<span style=\"color: #666666; \">0</span>  PRIMARY   PrimaryHDU    <span style=\"color: #666666; \">4</span> ()      uint8\n<span style=\"color: #666666; \">1</span>  MYTAB    BinTableHDU   <span style=\"color: #666666; \">15</span> <span style=\"color: #666666; \">4</span>R x <span style=\"color: #666666; \">3</span>C    [<span style=\"color: #666666; \">10</span>A, J, <span style=\"color: #666666; \">1000</span>E]\n</pre></div><p>Section 5.2, in page 26, of the\u00a0<a class=\"reference external\" href=\"http://stsdas.stsci.edu/download/wikidocs/The_PyFITS_Handbook.pdf\">PyFITS Handbook</a>\u00a0describes ways to append columns to a table and merge two tables.</p></div></div><div class=\"section\" id=\"finally\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id11\" style=\"text-decoration: none; color: black; \">Finally</a></h1><p><a class=\"reference external\" href=\"http://twitter.com/#!/doug_burke/status/2375100477214720\">http://twitter.com/#!/doug_burke/status/2375100477214720</a></p></div>\n</div>", "tags": ["PyFITS", "FITS"], "title": "PyFITS: FITS files in python - part 2"}