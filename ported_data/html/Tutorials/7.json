{"date_published": "2010-01-11", "author": "aldcroft", "description": "<div class=\"entry\" id=\"blogbody\">\n<div class=\"document\" id=\"installing-sherpa-standalone-for-x-ray-analysis\">This tutorial covers the steps to build a \"complete\" standalone installation of\n<em>Sherpa</em> which includes everything needed to do X-ray analysis. This was tested on Mac OS 10.6 with EPD Python and also includes\nspecific issues that came up when installing on a CentOS 5.4 linux system (with\nno root access) using a custom-built python 2.7. Note that if you don't want\nto do X-ray analysis then the instructions on the <a class=\"reference external\" href=\"http://cxc.harvard.edu/contrib/sherpa\">Sherpa</a> page will be sufficient and you don't\nneed to follow the directions below.<br/><br/><div class=\"section\" id=\"download-standalone-sherpa\">\n<h2>Download standalone Sherpa</h2>\n<p>The starting point is the <em>Sherpa</em> standalone page\n<a class=\"reference external\" href=\"http://cxc.harvard.edu/contrib/sherpa\">http://cxc.harvard.edu/contrib/sherpa</a> and the requirements stated therein.\nDownload and untar the installation tarball into a scratch directory.</p>\n</div>\n<div class=\"section\" id=\"download-ciao-libraries\">\n<h2>Download CIAO libraries</h2>\n<p>The easiest way to get all the optional libraries is just to download the CIAO\nbinaries. You might ask why bother with standalone <em>Sherpa</em> if you are just\nlinking against CIAO binaries. The point is that you get to retain your own\npython (which in my case has a substantial installation 3rd party libraries)\nand add <em>Sherpa</em> instead of starting with the <em>Sherpa</em> python and adding\nlibraries.</p>\n<p>Go to the <a class=\"reference external\" href=\"http://cxc.harvard.edu/ciao/download\">CIAO download</a> page and fill\nin the form. Make sure to explicitly select the platform that matches your\npython installation. To build standalone Sherpa you only need</p>\n<ul class=\"simple\"><li>CIAO analysis tools</li>\n<li>Sherpa modeling and fitting package</li>\n<li>Contributed scripts</li>\n</ul>\n<p>Follow the instructions to install CIAO. Note that the CIAO install script puts\neverything into <tt class=\"docutils literal\"><span class=\"pre\">&lt;INSTALL_DIR&gt;/ciao-4.x</span></tt> where <tt class=\"docutils literal\"><span class=\"pre\">&lt;INSTALL_DIR&gt;</span></tt> is the\ninstallation directory that you specify. In the rest of the tutorial it is\nassumed that you've done something like:</p>\n<pre class=\"literal-block\">set CIAO=&lt;INSTALL_DIR&gt;/ciao-4.5 # tcsh/csh<br/>CIAO=&lt;INSTALL_DIR&gt;/ciao-4.5 # bash<br/><br/></pre>\n</div>\n<div class=\"section\" id=\"make-library-links\">\n<h2>Make library links</h2>\n<p>To use dynamical spectrum group in Sherpa you need to get the CIAO python\n<tt class=\"docutils literal\"><span class=\"pre\">group</span></tt> library into your python path. From python 2.7 the handiest way to\ndo this is make a link in your Python site-packages directory.\u00a0 The following (slightly-cryptic) command will do this:</p>\n<pre class=\"literal-block\">ln -s ${CIAO}/lib/python2.7/site-packages/group.so \\<br/> `python -m site --user-site`/</pre>\n<p>You could also put this file into any directory and include that directory in\nyour PYTHONPATH when doing Sherpa analysis.</p>\n<p>On my CentOS-5.4 system there was an issue with two of the system libraries\n(g2c and gfortran) not being found when linking. I found that these were\navailable but not linked in the usual fashion (e.g. <tt class=\"docutils literal\"><span class=\"pre\">libg2c.so</span> <span class=\"pre\">-&gt;</span>\n<span class=\"pre\">libg2c.so.0</span></tt>). Ideally you or your system administrator can fix this. But\nthe following workaround also does the trick:</p>\n<pre class=\"literal-block\">ln -s /usr/lib64/libg2c.so.0 ${CIAO}/lib/libg2c.so<br/>ln -s /usr/lib64/libgfortran.so.1 ${CIAO}/lib/libgfortran.so<br/></pre>\n<p>This relies on the fact that we'll build the Sherpa libraries to include\n${CIAO}/lib in the runtime load library path. Note that if you are on a 32-bit\nmachine just use <tt class=\"docutils literal\"><span class=\"pre\">/usr/lib</span></tt> instead of <tt class=\"docutils literal\"><span class=\"pre\">/usr/lib64</span></tt>.<span style=\"font-weight: bold;\"><br/></span></p>\n</div>\n<div class=\"section\" id=\"build\">\n<h2>Build</h2>\n<p>Now you are ready to build. From within the untarred sherpa directory do:</p>\n<pre class=\"literal-block\">python setup.py \\<br/> fftw_library_dir=${CIAO}/ots/lib \\<br/> fftw_include_dir=${CIAO}/ots/include \\<br/> cfitsio_library_dir=${CIAO}/ots/lib \\<br/> xspec_library_dir=${CIAO}/ots/lib \\<br/> reg_library_dir=${CIAO}/lib \\<br/> reg_include_dir=${CIAO}/include \\<br/> wcs_library_dir=${CIAO}/ots/lib \\<br/> wcs_include_dir=${CIAO}/ots/include \\<br/> fortran_lib=gfortran \\<br/> fortran_library_dir=${CIAO}/lib \\<br/> install<br/></pre>\n<p>If it doesn't succeed with the build then you may need to use the custom\n<a href=\"http://hea-www.harvard.edu/%7Ealdcroft/sherpa/setup.py\"><span class=\"pre\">setup.py</span></a> script. On CentOS-5.4 I found that\nsome libraries were using symbols defined in <tt class=\"docutils literal\"><span class=\"pre\">libgfortran.so</span></tt> but that it was\nnot being linked in even when I used the <tt class=\"docutils literal\"><span class=\"pre\">fortran_lib</span></tt> option. To work\naround this I hacked the <tt class=\"docutils literal\"><span class=\"pre\">setup.py</span></tt> to let me insist on an additional library\nand library_dir. With the patched <tt class=\"docutils literal\"><span class=\"pre\">setup.py</span></tt> try this:</p>\n<pre class=\"literal-block\">python setup.py \\<br/> fftw_library_dir=${CIAO}/lib \\<br/> fftw_include_dir=${CIAO}/include \\<br/> cfitsio_library_dir=${CIAO}/ots/lib \\<br/> xspec_library_dir=${CIAO}/ots/lib \\<br/> reg_library_dir=${CIAO}/lib \\<br/> reg_include_dir=${CIAO}/include \\<br/> wcs_library_dir=${CIAO}/ots/lib \\<br/> wcs_include_dir=${CIAO}/ots/include \\<br/> cpp_lib=gfortran \\<br/> cpp_library_dir=${CIAO}/lib \\<br/> install<br/><br/><span style=\"font-family: arial,helvetica,clean,sans-serif;\">You may also need to include ${CIAO}/lib and ${CIAO}/ots/lib in your<br/>\u00a0LD_LIBRARY_PATH or DYLD_LIBRARY_PATH environment variable.<br/></span><br/>setenv LD_LIBRARY_PATH ${CIAO}/lib:${CIAO}/ots/lib # linux<br/>setenv DYLD_LIBRARY_PATH ${CIAO}/lib:${CIAO}/ots/lib # mac<br/><br/></pre>\n</div>\n<div class=\"section\" id=\"test\"><h2>Test</h2>\n<p>Assuming a successful build you are ready to test. In order to use the Xspec\nmodels you will first need to set the HEADAS environment variable:</p>\n<pre class=\"literal-block\">setenv HEADAS ${CIAO}/ots/spectral<br/></pre>\n<p>Now go back to the <a class=\"reference external\" href=\"http://cxc.harvard.edu/contrib/sherpa\">Sherpa</a> page and read\nit carefully. Did you do all the configuration of your .sherpa.rc and\nmatplotlibrc? OK, now try:</p>\n<pre class=\"literal-block\">% ipython --pylab<br/>import sherpa.astro.ui as ui<br/></pre>\n<p>Note that using the --pylab switch seems to make the plotting work more reliably.</p><p>If that worked with no messages then you might be done. But the real test is\nfitting an X-ray spectrum (e.g. a file called <tt class=\"docutils literal\"><span class=\"pre\">acis.pi</span></tt>) with an Xspec model\nand plotting:</p>\n<pre class=\"literal-block\">ui.load_pha('acis.pi')<br/>ui.set_source(ui.xsphabs.abs1 * ui.powlaw1d.p1)<br/>ui.fit()<br/>ui.plot_fit_resid()<br/></pre>\n<p>If all goes well you should see a plot. Since you are now using the matplotlib\nbackend the ChIPS plotting commands are replaced by matplotlib commands. The\nfirst thing you might want to do is make the axes logarithmic:</p>\n<pre class=\"literal-block\">ax = gca()<br/>ax.set_xscale('log')<br/>ax.set_yscale('log')<br/><br/></pre>\n</div>\n<div class=\"section\" id=\"debugging\">\n<h2>Debugging</h2>\n<p>If you get any messages about libraries not loading during the <tt class=\"docutils literal\"><span class=\"pre\">import</span>\n<span class=\"pre\">sherpa.astro.ui</span></tt> command then something is wrong. At this top level the\nactual import errors are caught and replaced with more user-friendly messages.\nUnfortunately those messages hide what you need to know in order to debug\nlibrary problems. To see what is happening you need to explicitly import\nlibraries, e.g.:</p>\n<pre class=\"literal-block\">import group<br/>import sherpa.astro.xspec<br/>import sherpa.astro.utils._region<br/>import sherpa.astro.utils._wcs<br/></pre>\n<p>If you still don't see tracebacks that indicate the problem then you probably\nneed to edit your ~/.sherpa.rc and change the default verbosity. Here is what\nI have in my file:</p>\n<pre class=\"literal-block\">[verbosity]<br/># Sherpa Chatter level<br/># a non-zero value will<br/># display full error traceback<br/>level : 2000<br/></pre>\n</div>\n</div>\n</div>", "tags": ["sherpa", "X-ray", "fitting"], "title": "Installing Sherpa 4.5 standalone for X-ray analysis"}