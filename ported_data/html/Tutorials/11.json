{"date_published": "2010-10-24", "author": "phn", "description": "<div class=\"entry\" id=\"blogbody\">\n<strong><h1><h2>PyFITS: FITS files in Python</h2></h1><p style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \">In this article, we provide examples of using the python module\u00a0<a class=\"reference external\" href=\"http://www.stsci.edu/resources/software_hardware/pyfits\">PyFITS</a>\u00a0for working with FITS data. We first go through a brief overview of the FITS standard, and then we describe ways for accessing information in FITS files, using convenience functions defined in PyFITS. PyFITS offers facilities that provide more advanced access to information in FITS files, but these will not be discussed here. Perhaps, a future article will discuss these.</p><p style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \">These instructions are based on the\u00a0<a class=\"reference external\" href=\"http://stsdas.stsci.edu/download/wikidocs/The_PyFITS_Handbook.\">PyFITS Handbook</a>\u00a0(link is to a PDF file), which has exhaustive information on the facilties provided by PyFITS.</p><div class=\"contents topic\" id=\"contents\" style=\"margin-top: 2em; margin-right: 2em; margin-bottom: 2em; margin-left: 2em; font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><p class=\"topic-title first\" style=\"margin-top: 0px !important; font-weight: bold; \">Contents</p><ul class=\"simple\" style=\"margin-bottom: 1em; \"><li><a class=\"reference internal\" href=\"#brief-overview-of-the-fits-standard\" id=\"id4\">Brief overview of the FITS standard</a></li>\n<li><a class=\"reference internal\" href=\"#accesing-fits-files-with-pyfits\" id=\"id5\">Accesing FITS files with PyFITS</a><ul>\n<li><a class=\"reference internal\" href=\"#getting-basic-information-on-a-fits-file\" id=\"id6\">Getting basic information on a FITS file</a></li>\n<li><a class=\"reference internal\" href=\"#getting-information-from-headers-of-fits-files\" id=\"id7\">Getting information from headers of FITS files</a></li>\n<li><a class=\"reference internal\" href=\"#getting-data-from-fits-files\" id=\"id8\">Getting data from FITS files</a></li>\n<li><a class=\"reference internal\" href=\"#creating-and-modifying-fits-files\" id=\"id9\">Creating and modifying FITS files</a></li>\n</ul></li>\n<li><a class=\"reference internal\" href=\"#fits-header-keywords\" id=\"id10\">FITS header keywords</a></li>\n<li><a class=\"reference internal\" href=\"#links\" id=\"id11\">Links</a></li>\n</ul>\n</div><div class=\"section\" id=\"brief-overview-of-the-fits-standard\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id4\" style=\"text-decoration: none; color: black; \">Brief overview of the FITS standard</a></h1><p>FITS stands for\u00a0<em>Flexibile Image Transport System</em>, and is the IAU recognized standard for storing astronomical data.</p><p>A FITS file consists of one or more\u00a0<em>header and data unit</em>s, referred to as\u00a0<em>HDUs</em>. An HDU consists of a header, which describes the data contained in the HDU, followed by the data itself. The first HDU is called the\u00a0<em>Primary HDU</em>. Other HDUs, if present, are referred to as\u00a0<em>extensions</em>.</p><p>In a valid FITS file the data part of an HDU can be empty. The simplest valid FITS file is one with just the header of the Primary HDU. A FITS file with only the Primary HDU is refered to as a\u00a0<em>Basic FITS</em>\u00a0file or a\u00a0<em>Single Image FITS (SIF)</em>\u00a0file. A FITS file with extensions is referred to as a\u00a0<em>Multi-Extension FITS (MEF)</em>\u00a0file.</p><p>A header consists of\u00a0<em>records</em>, also called\u00a0<em>card images</em>, each having a maximum of 80 characters. A record contains a\u00a0<em>keyword</em>\u00a0with maximum length of 8 characters, an \"=\" sign at the 9th position, a space at the 10th position, followed by a value for the keyword. A \"/\" after the value of the keyword indicates the beginning of a\u00a0<em>comment</em>for the record and the characters from that point, through the 80th character becomes the comment. The only characters allowed in a header record are ASCII values 32 to 126. A record can be a blank record in which case the entire record will be filled with ASCII space character (ASCII 32). The special keywords\u00a0<em>HISTORY</em>\u00a0and<em>COMMENT</em>, do not use \"=\" sign and simply uses positions 11 to 80, to store the value.</p><p>There is a set of standard keywords, some mandatory and others optional, defined in the FITS standard. Document describing the standard is available from\u00a0<a class=\"reference external\" href=\"http://fits.gsfc.nasa.gov/fits_home.html\">the FITS Support Office</a>. In addition to these there are many non-standard FITS keywords that are used quite frequently. The exact keywords included in an header depends on the type of the data in the data part of the HDU. A list of standard and, non-standard but frequently used, keywords is available at<a class=\"reference external\" href=\"http://fits.gsfc.nasa.gov/fits_dictionary.html\">http://fits.gsfc.nasa.gov/fits_dictionary.html</a>. In addition, \"World Coordinate System\" (WCS) information is stored in keywords defined in appropriate standards, which are also linked to at the above url.</p><p>The value of a header keyword can be of the following types.</p><ol class=\"arabic simple\" style=\"margin-bottom: 1em; list-style-type: decimal; list-style-position: initial; list-style-image: initial; \"><li>String; ascii characters enclosed in single quotes.</li>\n<li>Logical; letter T or letter F.</li>\n<li>Integers; signed decimal numbers.</li>\n<li>Floating point numbers; similar to integers, with E or D denoting the exponent part.</li>\n<li>Complex numbers; specified as (real, imag).</li>\n</ol>\n<p>The data in an HDU can be an\u00a0<em>image</em>, which is an array of dimensions 1 to 999, a\u00a0<em>binary table</em>\u00a0or an\u00a0<em>ASCII table</em>. There is another type of data structure called random groups, which is used only in radio interferometry work.</p><p>Data can be 8-bit characters, integers (8-bit unsigned, and 16-bit, 32-bit and 64-bit signed integers) and floating point numbers (32-bit and 64-bit). The data type is indicated using the\u00a0<em>BITPIX</em>\u00a0keyword, with value set to the number of bits, e.g., 8 for characters and unsigned integers. The values -32 and -64 are used for 32-bit and 64-bit formats, respectively.</p><p>An important thing to keep in mind is that the value stored in a data array, the raw value, need not be the actual value representing the physical quantity. If this is so, then the keywords\u00a0<em>BSCALE</em>\u00a0and\u00a0<em>BZERO</em>\u00a0will have values other than 1.0 and 0.0, respectively. The actual quantity that is being conveyed can be calculated as</p><pre class=\"literal-block\" style=\"margin-left: 2em; margin-right: 2em; \">physical_value = raw_value * BSCALE + BZERO.\n</pre><div class=\"note\" style=\"margin-top: 2em; margin-right: 2em; margin-bottom: 2em; margin-left: 2em; border-top-width: medium; border-right-width: medium; border-bottom-width: medium; border-left-width: medium; border-top-style: outset; border-right-style: outset; border-bottom-style: outset; border-left-style: outset; border-color: initial; padding-top: 1em; padding-right: 1em; padding-bottom: 1em; padding-left: 1em; \"><p class=\"first admonition-title\" style=\"margin-top: 0px !important; font-weight: bold; font-family: sans-serif; \">Note</p><p class=\"last\" style=\"margin-bottom: 0px !important; \">PyFITS will automatically perform this conversion, when it reads in data from a FITS file. The BITPIX value will also be changed to reflect this.</p></div><p>For tables, the corresponding keywords are\u00a0<em>TSCALEn</em>\u00a0and\u00a0<em>TZEROn</em>, where \"n\" denotes the field, i.e., table column, for which this value is applicable. So we have,\u00a0<tt class=\"docutils literal\">1 &lt;= n &lt;= TFIELDS</tt>, where\u00a0<em>TFIELDS</em>\u00a0is the number of columns in the table.</p><p>The number of \"dimensions\" for data arrays is specified using the keyword\u00a0<em>NAXIS</em>. The length of each dimension is specified using the keyword\u00a0<em>NAXISn</em>\u00a0where\u00a0<tt class=\"docutils literal\">1 &lt;= n &lt;= NAXIS</tt>.</p><p>Consider a \"data cube\" with 200 rows (y-axis), 200 columns (x-axis) and 4 \"pages\" (z-axis). Then NAXIS = 3, NAXIS1 = 200 (x-axis), NAXIS2 = 200 (y-axis) and NAXIS3 = 4 (z-axis). The data is stored in \"row-major\" format so that, we would access an element in row 10, col 8 and page 1 as\u00a0<tt class=\"docutils literal\"><span class=\"pre\" style=\"white-space: pre; \">data[0][9][8]</span></tt>\u00a0in C, and as<tt class=\"docutils literal\"><span class=\"pre\" style=\"white-space: pre; \">data[0][9][8]</span></tt>\u00a0or\u00a0<tt class=\"docutils literal\">data[0,9,8]</tt>\u00a0in Python.</p><p>Tables can only appear in extensions and not in Primary HDU and the type of the table will be indicated in the\u00a0<em>XTENSION</em>\u00a0keyword of the header of the concerned HDU. If an extension contains image data, i.e., an array, then XTENSION = IMAGE.</p><p>For an ASCII table, i.e., XTENSION = TABLE, NAXIS will always be 2. NAXIS1 will be the total number of 8-bit characters in a row, and NAXIS2 will be the number of rows. In FITS a \"column\" is a position in a row, where as a \"field\" represents a column in the table. The number of columns in a table, is therefore, given by the value of the keyword TFIELDS.</p><p>Binary tables, i.e., XTENSION = BINTABLE, have the same interpretation for NAXIS and NAXIS2. In ASCII tables a value in a particular \"cell\" will be a scalar. But in a binary table this can be a vector. The value of NAXIS1 for a binary table will take this into account.</p></div><div class=\"section\" id=\"accesing-fits-files-with-pyfits\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id5\" style=\"text-decoration: none; color: black; \">Accesing FITS files with PyFITS</a></h1><p>PyFITS provides several \"convenience\" functions that allow the user to work with FITS data, without having to deal with opening and closing files. As mentioned before, there are methods available that provide much finer control over accessing FITS data.</p><p>In the following examples, we use the FITS file \"WFPC2u5780205r_c0fx.fits\", which is linked to by the first link in the table at<a class=\"reference external\" href=\"http://fits.gsfc.nasa.gov/fits_samples.html\">http://fits.gsfc.nasa.gov/fits_samples.html</a>.</p><p>In the code samples below, lines beginning with \"&gt;&gt;&gt;\" are code entered into the python shell. Only part of long outputs are shown and these are indicated with the string \"...\".</p><div class=\"section\" id=\"getting-basic-information-on-a-fits-file\"><h2><a class=\"toc-backref\" href=\"#id6\" style=\"text-decoration: none; color: black; \">Getting basic information on a FITS file</a></h2><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">import</span> <span style=\"color: #0000ff; font-weight: bold; \">pyfits</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>info(<span style=\"color: #ba2121; \">\"WFPC2u5780205r_c0fx.fits\"</span>)\nFilename: WFPC2u5780205r_c0fx<span style=\"color: #666666; \">.</span>fits\nNo<span style=\"color: #666666; \">.</span>  Name     Type   Cards  Dimensions  Format\n<span style=\"color: #666666; \">0</span>  PRIMARY   PrimaryHDU   <span style=\"color: #666666; \">262</span> (<span style=\"color: #666666; \">200</span>, <span style=\"color: #666666; \">200</span>, <span style=\"color: #666666; \">4</span>) float32\n<span style=\"color: #666666; \">1</span>  U5780205R_CVT<span style=\"color: #666666; \">.</span>C0H<span style=\"color: #666666; \">.</span>TAB TableHDU    <span style=\"color: #666666; \">353</span> <span style=\"color: #666666; \">4</span>R x <span style=\"color: #666666; \">49</span>C   [D25<span style=\"color: #666666; \">.17</span>,\nD25<span style=\"color: #666666; \">.17</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>,\nA1, E15<span style=\"color: #666666; \">.7</span>, I12, I12, D25<span style=\"color: #666666; \">.17</span>, D25<span style=\"color: #666666; \">.17</span>, A8, A8, I12, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>,\nE15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, I12, I12, I12, I12, I12, I12, I12,\nI12, A48, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>,\nE15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>, E15<span style=\"color: #666666; \">.7</span>]\n</pre></div><p>The output shows that the file has two HDUs. The header of the Primary HDU has 262 header records and the data part is a 4x200x200 array, i.e., 4 \"pages\", 200 rows and 200 columns, of 32 bit floating point numbers. The file has a table extension which has a header of 353 records and the data part has 4 rows and 49 columns. The data format in each column is also given. The total number of 8-bit bytes in one row is 747+49, i.e., 747 bytes indicated by the format strings and one 8-bit separator associated with each column.</p><p>Note that while using PyFITS we often refer to the Primary HDU as extension number 0 and the first FITS extension as extension number 1.</p></div><div class=\"section\" id=\"getting-information-from-headers-of-fits-files\"><h2><a class=\"toc-backref\" href=\"#id7\" style=\"text-decoration: none; color: black; \">Getting information from headers of FITS files</a></h2><p>The\u00a0<tt class=\"docutils literal\">getheader</tt>\u00a0function returns the header of a specified extension. If no extension is given then the header of the Primary HDU is returned.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_primary <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>getheader(<span style=\"color: #ba2121; \">\"WFPC2u5780205r_c0fx.fits\"</span>)\n</pre></div><p>The header can be treated as a python dictionary. So to find all keywords in the header we can execute</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header<span style=\"color: #666666; \">.</span>keys()\n[<span style=\"color: #ba2121; \">'SIMPLE'</span>,\n <span style=\"color: #ba2121; \">'BITPIX'</span>,\n <span style=\"color: #ba2121; \">'NAXIS'</span>,\n <span style=\"color: #ba2121; \">'NAXIS1'</span>,\n <span style=\"color: #ba2121; \">'NAXIS2'</span>,\n <span style=\"color: #ba2121; \">'NAXIS3'</span>,\n <span style=\"color: #ba2121; \">'EXTEND'</span>,\n <span style=\"color: #ba2121; \">'COMMENT'</span>,\n <span style=\"color: #ba2121; \">'BSCALE'</span>,\n <span style=\"color: #666666; \">...</span>\n</pre></div><p>The keys can be used to access information in the header. Note that the keys are case-insensitive.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header[<span style=\"color: #ba2121; \">'BITPIX'</span>]\n<span style=\"color: #666666; \">-32</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header[<span style=\"color: #ba2121; \">'bitpix'</span>]\n<span style=\"color: #666666; \">-32</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header[<span style=\"color: #ba2121; \">'naxis'</span>]\n<span style=\"color: #666666; \">3</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header[<span style=\"color: #ba2121; \">'naxis1'</span>]\n<span style=\"color: #666666; \">200</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header[<span style=\"color: #ba2121; \">'naxis2'</span>]\n<span style=\"color: #666666; \">200</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header[<span style=\"color: #ba2121; \">'naxis3]</span>\n<span style=\"color: #666666; \">4</span>\n</pre></div><p>To get the header of the first extension we can give a number, indicating the extension, to the\u00a0<tt class=\"docutils literal\">getheader</tt>\u00a0function. Here, since the table is the first extension we give the number 1. To get the primary header we can either omit the number or give the number 0.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>getheader(<span style=\"color: #ba2121; \">\"WFPC2u5780205r_c0fx.fits\"</span>,<span style=\"color: #666666; \">1</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table<span style=\"color: #666666; \">.</span>keys()\n[<span style=\"color: #ba2121; \">'XTENSION'</span>,\n <span style=\"color: #ba2121; \">'BITPIX'</span>,\n <span style=\"color: #ba2121; \">'NAXIS'</span>,\n <span style=\"color: #ba2121; \">'NAXIS1'</span>,\n <span style=\"color: #ba2121; \">'NAXIS2'</span>,\n <span style=\"color: #ba2121; \">'PCOUNT'</span>,\n <span style=\"color: #ba2121; \">'GCOUNT'</span>,\n <span style=\"color: #ba2121; \">'TFIELDS'</span>,\n <span style=\"color: #ba2121; \">'EXTNAME'</span>,\n <span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table[<span style=\"color: #ba2121; \">'naxis'</span>]\n<span style=\"color: #666666; \">2</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table[<span style=\"color: #ba2121; \">'tfields'</span>] <span style=\"color: #408080; font-style: italic; \"># A field is a table column.</span>\n<span style=\"color: #666666; \">49</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table[<span style=\"color: #ba2121; \">'naxis2'</span>]\n<span style=\"color: #666666; \">4</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table[<span style=\"color: #ba2121; \">'naxis1'</span>]\n<span style=\"color: #666666; \">796</span>\n</pre></div><p>If we know that a header has a keyword, and we just want to find its value, we can use the\u00a0<tt class=\"docutils literal\">getval</tt>\u00a0function.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>getval(<span style=\"color: #ba2121; \">'WFPC2u5780205r_c0fx.fits'</span>,<span style=\"color: #ba2121; \">'bitpix'</span>,<span style=\"color: #666666; \">0</span>)\n<span style=\"color: #666666; \">-32</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>getval(<span style=\"color: #ba2121; \">'WFPC2u5780205r_c0fx.fits'</span>,<span style=\"color: #ba2121; \">'bitpix'</span>,<span style=\"color: #666666; \">1</span>)\n<span style=\"color: #666666; \">8</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>getval(<span style=\"color: #ba2121; \">'WFPC2u5780205r_c0fx.fits'</span>,<span style=\"color: #ba2121; \">'xtension'</span>,<span style=\"color: #666666; \">1</span>)\n<span style=\"color: #ba2121; \">'TABLE'</span>\n</pre></div><p>The last line of the output shows that the table in the FITS file is an ASCII table. A binary table will have the value 'BINTABLE' and an image array will have the value 'IMAGE'.</p><p>To see the comment associated with a keyword, we will need to access the list of\u00a0<em>Card Object</em>\u00a0in the header.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header1_cards <span style=\"color: #666666; \">=</span> header1<span style=\"color: #666666; \">.</span>ascardlist()\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">print</span> header1_cards[<span style=\"color: #ba2121; \">'bitpix'</span>]\nBITPIX <span style=\"color: #666666; \">=</span>          <span style=\"color: #666666; \">8</span> <span style=\"color: #666666; \">/</span> Data typex\n</pre></div></div><div class=\"section\" id=\"getting-data-from-fits-files\"><h2><a class=\"toc-backref\" href=\"#id8\" style=\"text-decoration: none; color: black; \">Getting data from FITS files</a></h2><p>To get the data part from an HDU we use the\u00a0<tt class=\"docutils literal\">getdata</tt>\u00a0function, passing it the name of the FITS file and the HDU from which data needs to be obtained.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_cube <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>getdata(<span style=\"color: #ba2121; \">'WFPC2u5780205r_c0fx.fits\",0)</span>\n</pre></div><p>To get header along with data set the\u00a0<tt class=\"docutils literal\">header</tt>\u00a0option to\u00a0<tt class=\"docutils literal\">True</tt>.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_cube, header_data_cube <span style=\"color: #666666; \">=</span> pyfits<span style=\"color: #666666; \">.</span>getdata(\n  <span style=\"color: #ba2121; \">'WFPC2u5780205r_c0fx.fits'</span>, <span style=\"color: #666666; \">0</span>, header<span style=\"color: #666666; \">=</span><span style=\"color: #008000; \">True</span>)\n</pre></div><p>If data in the HDU is an image, then the data returned is a\u00a0<a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy-1.5.x/reference/arrays.ndarray.html\">numpy ndarray object</a>\u00a0.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">type</span>(data_cube)\n<span style=\"color: #666666; \">&lt;</span><span style=\"color: #008000; \">type</span> <span style=\"color: #ba2121; \">'numpy.ndarray'</span><span style=\"color: #666666; \">&gt;</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_cube<span style=\"color: #666666; \">.</span>shape\n(<span style=\"color: #666666; \">4</span>, <span style=\"color: #666666; \">200</span>, <span style=\"color: #666666; \">200</span>)\n</pre></div><p>The shape parameter returns the shape of the array as a tuple of the format (NAXIS3, NAXIS2, NAXIS1) or in general (NAXISn, ..., NAXIS1), where n is the value of the keyword NAXIS. This means that NAXIS1 is the number of\u00a0<em>columns</em>\u00a0(<em>x axis</em>), NAXIS2 is the number of\u00a0<em>rows</em>\u00a0(<em>y axis</em>) and NAXIS3 is the number of\u00a0<em>pages</em>\u00a0(<em>z-axes</em>).</p><p>The following illustrates that the \"data cube\" behaves just like a regular array. Here,\u00a0<a class=\"reference external\" href=\"http://stsdas.stsci.edu/numdisplay/\">numdisplay</a>\u00a0is used to display the array on\u00a0<a class=\"reference external\" href=\"http://hea-www.harvard.edu/RD/ds9/\">DS9</a>. DS9 should be running before calling\u00a0<tt class=\"docutils literal\">numdisplay.display</tt>.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">import</span> <span style=\"color: #0000ff; font-weight: bold; \">copy</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_cube_copy <span style=\"color: #666666; \">=</span> copy<span style=\"color: #666666; \">.</span>deepcopy(data_cube)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_cube_copy_page_3 <span style=\"color: #666666; \">=</span> data_cube_copy[<span style=\"color: #666666; \">3</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">import</span> <span style=\"color: #0000ff; font-weight: bold; \">numdisplay</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> numdisplay<span style=\"color: #666666; \">.</span>display(data_cube[<span style=\"color: #666666; \">3</span>])\nImage displayed <span style=\"color: #008000; font-weight: bold; \">with</span> Z1: <span style=\"color: #666666; \">-4.29414</span> Z2: <span style=\"color: #666666; \">813.35</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_cube_copy_page_3[<span style=\"color: #666666; \">90</span>:<span style=\"color: #666666; \">110</span>,:] <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">32000.0</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> numdisplay<span style=\"color: #666666; \">.</span>display(data_cube_copy_page_3)\nImage displayed <span style=\"color: #008000; font-weight: bold; \">with</span> Z1: <span style=\"color: #666666; \">-4.29414</span> Z2: <span style=\"color: #666666; \">32000.0</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_cube_copy_page_3[:,<span style=\"color: #666666; \">20</span>:<span style=\"color: #666666; \">30</span>] <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">32000.0</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> numdisplay<span style=\"color: #666666; \">.</span>display(data_cube_copy_page_3)\nImage displayed <span style=\"color: #008000; font-weight: bold; \">with</span> Z1: <span style=\"color: #666666; \">-4.29414</span> Z2: <span style=\"color: #666666; \">32000.0</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_cube_copy_page_3[:,<span style=\"color: #666666; \">-30</span>:<span style=\"color: #666666; \">-20</span>] <span style=\"color: #666666; \">=</span> <span style=\"color: #666666; \">32000.0</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> numdisplay<span style=\"color: #666666; \">.</span>display(data_cube_copy_page_3)\nImage displayed <span style=\"color: #008000; font-weight: bold; \">with</span> Z1: <span style=\"color: #666666; \">-4.29414</span> Z2: <span style=\"color: #666666; \">32000.0</span>\n</pre></div><p>If data in the HDU is a table then an object similar to a\u00a0<a class=\"reference external\" href=\"http://docs.scipy.org/doc/numpy-1.5.x/reference/generated/numpy.recarray.html\">numpy record array</a>\u00a0is returned. As mentioned before, in FITS, what we call a \"table column\" is referred to as a \"field\". A \"column\" in FITS referes to an 8-bit byte in a row, i.e., a position in a row. Hence a \"field\" will span a range of \"columns\".</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_table, header_table <span style=\"color: #666666; \">=</span>\n  pyfits<span style=\"color: #666666; \">.</span>getdata(<span style=\"color: #ba2121; \">\"WFPC2u5780205r_c0fx.fits\"</span>, <span style=\"color: #666666; \">1</span>, header<span style=\"color: #666666; \">=</span><span style=\"color: #008000; \">True</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">type</span>(data_table)\n<span style=\"color: #666666; \">&lt;</span><span style=\"color: #008000; font-weight: bold; \">class</span> <span style=\"border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: #ff0000; border-right-color: #ff0000; border-bottom-color: #ff0000; border-left-color: #ff0000; \">'</span><span style=\"color: #0000ff; font-weight: bold; \">pyfits</span><span style=\"color: #666666; \">.</span>core<span style=\"color: #666666; \">.</span>FITS_rec<span style=\"color: #ba2121; \">'&gt;</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_table[<span style=\"color: #666666; \">0</span>] <span style=\"color: #408080; font-style: italic; \"># First row</span>\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_table[<span style=\"color: #666666; \">0</span>][<span style=\"color: #666666; \">0</span>] <span style=\"color: #408080; font-style: italic; \"># First row, first column</span>\n<span style=\"color: #666666; \">182.63118863080001</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_table<span style=\"color: #666666; \">.</span>field(<span style=\"color: #666666; \">0</span>) <span style=\"color: #408080; font-style: italic; \"># first column</span>\narray([ <span style=\"color: #666666; \">182.63118863</span>, <span style=\"color: #666666; \">182.62552336</span>, <span style=\"color: #666666; \">182.65237923</span>, <span style=\"color: #666666; \">182.65002236</span>])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_table<span style=\"color: #666666; \">.</span>names <span style=\"color: #408080; font-style: italic; \"># Names of individual columns</span>\n<span style=\"color: #666666; \">...</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; \">len</span>(data_table<span style=\"color: #666666; \">.</span>names) <span style=\"color: #408080; font-style: italic; \"># Should be 49, since there are 49 columns</span>\n<span style=\"color: #666666; \">49</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> data_table<span style=\"color: #666666; \">.</span>field(<span style=\"color: #ba2121; \">'crval1'</span>) <span style=\"color: #408080; font-style: italic; \"># Data in column named CRVAL1</span>\narray([ <span style=\"color: #666666; \">182.63118863</span>, <span style=\"color: #666666; \">182.62552336</span>, <span style=\"color: #666666; \">182.65237923</span>, <span style=\"color: #666666; \">182.65002236</span>])\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> b <span style=\"color: #666666; \">=</span> data_table<span style=\"color: #666666; \">.</span>field(<span style=\"color: #ba2121; \">'backgrnd'</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> b[<span style=\"color: #666666; \">0</span>] <span style=\"color: #408080; font-style: italic; \"># first row in the column 'backgrnd'</span>\n<span style=\"color: #666666; \">-0.36763531</span>\n</pre></div></div><div class=\"section\" id=\"creating-and-modifying-fits-files\"><h2><a class=\"toc-backref\" href=\"#id9\" style=\"text-decoration: none; color: black; \">Creating and modifying FITS files</a></h2><p>Keys can be easily added to and removed from headers, using the methods provided by the \"header object\".</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> <span style=\"color: #008000; font-weight: bold; \">del</span> header_table[<span style=\"color: #ba2121; \">'bitpix'</span>]\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table<span style=\"color: #666666; \">.</span>has_key(<span style=\"color: #ba2121; \">'bitpix'</span>)\n<span style=\"color: #008000; \">False</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table<span style=\"color: #666666; \">.</span>update(<span style=\"color: #ba2121; \">'bitpix'</span>, <span style=\"color: #666666; \">8</span>, comment<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"Data type in bits.\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table[<span style=\"color: #ba2121; \">'bitpix'</span>]\n<span style=\"color: #666666; \">8</span>\n</pre></div><p>To add a key use the\u00a0<tt class=\"docutils literal\">update</tt>\u00a0method of the header. This method will add a keyword if that is not present, and will modify the value of the keyword if it is present.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table<span style=\"color: #666666; \">.</span>has_key(<span style=\"color: #ba2121; \">'avg1'</span>)\n<span style=\"color: #008000; \">False</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table<span style=\"color: #666666; \">.</span>update(<span style=\"color: #ba2121; \">'AVG1'</span>, <span style=\"color: #666666; \">23.0</span>, <span style=\"color: #ba2121; \">\"Avg in BOX1\"</span>)\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table[<span style=\"color: #ba2121; \">'avg1'</span>]\n<span style=\"color: #666666; \">23.0</span>\n<span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table<span style=\"color: #666666; \">.</span>ascardlist()[<span style=\"color: #ba2121; \">'avg1'</span>]\nAVG1  <span style=\"color: #666666; \">=</span>         <span style=\"color: #666666; \">23.0</span> <span style=\"color: #666666; \">/</span> Average <span style=\"color: #aa22ff; font-weight: bold; \">in</span> BOX1\n</pre></div><p>The methods,\u00a0<tt class=\"docutils literal\">add_comment</tt>,\u00a0<tt class=\"docutils literal\">add_history</tt>\u00a0and\u00a0<tt class=\"docutils literal\">add_blank</tt>\u00a0can be used to insert COMMENT, HISTORY and blank keywords, while the\u00a0<tt class=\"docutils literal\">get_comment</tt>\u00a0and<tt class=\"docutils literal\">get_history</tt>\u00a0methods will retrieve a list of COMMENT and HISTORY keywords in the header. One can use the syntax\u00a0<tt class=\"docutils literal\"><span class=\"pre\" style=\"white-space: pre; \">header['COMMENT']</span></tt>\u00a0to get the value of a comment, but since a FITS header can contain more than 1 COMMENT and HISTORY keywords, this will only return the first such keyword. The methods to add the above keywords also allow one to specify where the keywords must be inserted.</p><p>The code</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> header_table<span style=\"color: #666666; \">.</span>add_comment(<span style=\"color: #ba2121; \">\"A new comment\"</span>, before<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">\"median\"</span>)\n</pre></div><p>will insert a COMMENT key, just before the key MEDIAN. There is a keyword parameter,\u00a0<tt class=\"docutils literal\">after</tt>, to do the insertion after a specified keyword.</p><p>To create a new FITS file with some data and header information we can use the\u00a0<tt class=\"docutils literal\">writeto</tt>\u00a0function, providing it with a\u00a0<tt class=\"docutils literal\">filename</tt>, some\u00a0<tt class=\"docutils literal\">data</tt>\u00a0and a\u00a0<tt class=\"docutils literal\">header</tt>.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>writeto(filename, data, header)\n</pre></div><p>Example:</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>writeto(<span style=\"color: #ba2121; \">\"WFPC_copy_page_3.fits\"</span>, data_copy_page_3)\n</pre></div><p>Since a\u00a0<tt class=\"docutils literal\">header</tt>\u00a0was not provided, a minimal header will be inserted into the file.</p><p>The function\u00a0<tt class=\"docutils literal\">append</tt>\u00a0can be used to append an HDU to an already existing FITS file.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>append(filename, data, header)\n</pre></div><p>The\u00a0<tt class=\"docutils literal\">data</tt>\u00a0and\u00a0<tt class=\"docutils literal\">header</tt>\u00a0provided will be appended as an HDU extension to the FITS file represented by\u00a0<tt class=\"docutils literal\">filename</tt>.</p><p>Note that in both\u00a0<tt class=\"docutils literal\">writeto</tt>\u00a0and\u00a0<tt class=\"docutils literal\">append</tt>\u00a0functions, the\u00a0<tt class=\"docutils literal\">header</tt>\u00a0is optional. If not given a minimal header will be inserted into the HDU extension.</p><p>The function\u00a0<tt class=\"docutils literal\">update</tt>\u00a0is used to update an HDU.</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>update(filename, data, header, extension)\n</pre></div><p>Examples:</p><ul>\n<li><p class=\"first\" style=\"margin-top: 0px !important; \">Update extension number 3 with provided data and header</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>update(filename, data, header, ext<span style=\"color: #666666; \">=3</span>)\n</pre></div></li>\n<li><p class=\"first\" style=\"margin-top: 0px !important; \">Update extension 3 with data but do not change the header</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>update(filename, data, ext<span style=\"color: #666666; \">=3</span>)\n</pre></div></li>\n<li><p class=\"first\" style=\"margin-top: 0px !important; \">Update the extension named 'sci'</p><div class=\"highlight\" style=\"background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; \"><pre style=\"line-height: 16px; \"><span style=\"color: #666666; \">&gt;&gt;&gt;</span> pyfits<span style=\"color: #666666; \">.</span>update(filename, data, ext<span style=\"color: #666666; \">=</span><span style=\"color: #ba2121; \">'sci'</span>)\n</pre></div></li>\n</ul>\n</div></div><div class=\"section\" id=\"fits-header-keywords\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id10\" style=\"text-decoration: none; color: black; \">FITS header keywords</a></h1><p>THe following are some of the important keywords defined in the FITS standard.</p><table border=\"1\" class=\"docutils\" style=\"margin-top: 0.5em; margin-bottom: 0.5em; \"><colgroup><col width=\"15%\"></col><col width=\"85%\"></col></colgroup><thead valign=\"bottom\"><tr><th class=\"head\" style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Keyword</th><th class=\"head\" style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Description</th></tr></thead><tbody valign=\"top\"><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">SIMPLE</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Set to T if the file conforms to the FITS standard and to F if not.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">BITPIX</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Datatype of the data in the HDU.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">XTENSION</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Type of extension: IMAGE, TABLE, BINTABLE.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">NAXIS</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Number of dimensions of a data array. For tables this is always 2.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">NAXISn</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Length of each dimension. Here 1 &lt;= n &lt;= NAXIS. For tables NAXIS1 is the number of table rows.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">TFIELDS</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Number of fields, i.e., table columns, in the table.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">TFORMn</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Format of data in the nth table column. See table 7.3 in page 50 of the FITS Standard.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">BSCALE</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Factor by which data in an image has been scaled.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">BZERO</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Zero point of the data in an image array.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">TSCALEn</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Same as BSCALE, but for table column n.</td></tr><tr><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">TZEROn</td><td style=\"padding-left: 0.5em; padding-right: 0.5em; vertical-align: top; \">Same as BZERO, but for table column n.</td></tr></tbody></table></div><div class=\"section\" id=\"links\" style=\"font-family: 'Times New Roman'; font-weight: normal; line-height: normal; font-size: medium; \"><h1><a class=\"toc-backref\" href=\"#id11\" style=\"text-decoration: none; color: black; \">Links</a></h1><ul>\n<li><p class=\"first\" style=\"margin-top: 0px !important; \"><a class=\"reference external\" href=\"http://www.stsci.edu/resources/software_hardware/pyfits\">PyFITS</a></p><p>Python module for working with FITS data.</p></li>\n<li><p class=\"first\" style=\"margin-top: 0px !important; \">NASA/GSFC\u00a0<a class=\"reference external\" href=\"http://fits.gsfc.nasa.gov/fits_home.html\">FITS Support Office</a></p><p>Authoritative information on the FITS format, including documentation and links to software for manipulating FITS files.</p></li>\n</ul>\n<ul>\n<li><p class=\"first\" style=\"margin-top: 0px !important; \"><a class=\"reference external\" href=\"http://numpy.scipy.org/\">Numpy</a></p><p>Basic python package for scientific computing, including facilities for the creation and manipulation of N-dimensional arrays.</p></li>\n</ul>\n<ul class=\"simple\" style=\"margin-bottom: 1em; \"><li><a class=\"reference external\" href=\"http://stsdas.stsci.edu/numdisplay/\">Numdisplay</a></li>\n</ul>\n<blockquote>Python module for interacting with image display softwares, such as\u00a0<a class=\"reference external\" href=\"http://hea-www.harvard.edu/RD/ds9/\">DS9</a>.</blockquote></div></strong>\n</div>", "tags": ["PyFITS", "FITS"], "title": "PyFITS: FITS files in Python"}