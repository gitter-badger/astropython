{"date_published": "2011-07-25", "author": "aldcroft", "description": "<div class=\"entry\" id=\"blogbody\">\n<p>Ian Ozsvald has released an excellent <a href=\"http://ianozsvald.com/HighPerformancePythonfromTrainingatEuroPython2011_v0.2.pdf\">High Performance Python tutoria</a>l (55 page PDF) which walks through different ways of making Python code run much faster.\u00a0 Read more in the original <a href=\"http://ianozsvald.com/2011/07/25/high-performance-python-tutorial-v0-2-from-europython-2011/\">blog post</a>, look at the <a href=\"https://github.com/ianozsvald/EuroPython2011_HighPerformanceComputing\">source on github</a>, or watch the <a href=\"http://www.slideshare.net/IanOzsvald/euro-python2011-high-performance-python\">slides</a>.</p><p>Topics covered:</p><ul>\n<li>Python profiling (cProfile, RunSnake, line_profiler) \u2013 find bottlenecks</li>\n<li>PyPy \u2013 Python\u2019s new Just In Time compiler, a note on the new numpy module</li>\n<li>Cython \u2013 annotate your code and compile to C</li>\n<li>numpy integration with Cython \u2013 fast numerical Python library wrapped by Cython</li>\n<li>ShedSkin \u2013 automatic code annotation and conversion to C</li>\n<li>numpy vectors \u2013 fast vector operations using numpy arrays</li>\n<li>NumExpr on numpy vectors \u2013 automatic numpy compilation to multiple CPUs and vector units</li>\n<li>multiprocessing \u2013 built-in module to use multiple CPUs</li>\n<li>ParallelPython \u2013 run tasks on multiple computers</li>\n<li>pyCUDA \u2013 run tasks on your Graphics Processing Unit</li>\n<li>Other algorithmic choices and options you have</li>\n</ul>\n<p></p>\n</div>", "tags": ["HPC", "cluster", "numpy", "tutorial"], "title": "High Performance Python tutorial v0.2 (from EuroPython 2011)"}