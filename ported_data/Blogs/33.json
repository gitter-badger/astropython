{"date_published": "2011-07-01", "author": "aldcroft", "description": "Version 0.7.0 of asciitable (an extensible module for reading and writing ASCII tables) is now available. \u00a0This release includes the following key features:\nAdded support for reading and writing LaTeX tables (contributed by Moritz Guenther).\nImproved the CDS reader by better supporting multi-file tables (contributed by Frederic Grollier).\nRefactored the code into a package with functionally distinct modules.\nAdded a \"type\" attribute in the Column class that provides the type of a column as IntType, FloatType, or StrType.\n\nPlease see:\u00a0http://cxc.cfa.harvard.edu/contrib/asciitable/The new Latex and AASTex classes provide the ability to write publication quality LaTeX tables in both the standard and AAS \"deluxetable\" formats. \u00a0These classes provide hooks to inject additional LaTeX commands as needed for more complex tables.API changes:- Previously the read(), write(), get_reader() and get_writer()\u00a0raised an exception for unrecognized keyword arguments. \u00a0Now\u00a0those extra arguments are passed on to the Reader class\u00a0constructor. \u00a0From the user perspective this means you can call\u00a0read()/write() with class initialization arguments (see Cds and\u00a0Latex for examples). For developers it means more flexibility\u00a0in Reader classes.- One minor API change is not backward compatible. \u00a0When\u00a0specifying custom column converters (e.g. to force a column\u00a0that looks like integers to convert to floats) it was\u00a0previously possible to provide either a list of converters or a\u00a0single converter. \u00a0Now you must always provide a list of\u00a0converters even it is has only one element. \u00a0This was needed to\u00a0support consistent assigment of the Column.type attribute.Other minor fixes:- Fixed a bug when the \"end_line\" parameter is passed a function.- Fixed a bug where the RDB writer issued incorrect column types.", "tags": ["tables"], "title": "asciitable 0.7.0"}