{"code_in_html": "> python ipynb2article.py myanalysis.ipynb myanalysis.tex", "description": "[<p><strong>This guest post was contributed by Moritz Guenther:</strong></p>, <p>When I first encountered the IPython notebook, I thought this was a solution looking for a problem. However, I have since been converted! The tipping point for me was this: I want to version control my papers and I always had multiple directories for analysis code, plotting code, LaTeX files, plot scripts and figures and tables. That's just so unwieldy. Also, I found it cumbersome to email figures to individual collaborators all the time. The Notebook can hold all this information in one place and I can just provide my co-authors with a link to the github repository once and they have access to the latest version all the time. Even if they do not use python, they can still see the all the current figures using <a href=\"http://nbviewer.ipython.org\" target=\"_blank\">nbviewer.ipython.org</a><br/><br/>Now all papers I work on a are written in an IPython notebook. So, the final step to do is to convert the notebook to the LaTeX file I can submit to a journal. That's what this simple converter code does.<br/><br/>This converter is not intended to replace nbconvert from the IPython project. Instead, it serves one very specific purpose: Turn a notebook into a LaTeX file that I can submit to the journal.<br/></p>, <p></p>, <p>In this case it's run with my set of design choices (see below).<br/></p>, <p></p>, <p>Then, customize how each type of cell is converted by changing the converter:</p>, <p>Finally, call:</p>, <p>This method allows you to use only part of a notebook file (ignore to first n cells or ignore everything until a cell has a specific string value, e.g. \"The paper starts here\"). Also, it allows you to provide a text file that will be pasted before or after the converted notebook (you can put the 'usepackage' and similar stuff in those files so they don't clutter your notebook). However, I do not use this option any longer, because that means I would have multiple input files. If I put all those LaTeX headers into the notebook as well, I only have a single file.<br/></p>, <p></p>, <p><br/>To implement this I wrote a converter for each cell type. <em>LiteralSourceConverter</em> just takes the literal string value (it also adds a line break at the end of the cell) and puts it into the LaTeX file (use for for markdown and raw text cells), <em>MarkedCodeOutputConverter</em> check if a code cell has a specific string in it and if so, it copies the output of this cell, and <em>LatexHeadingConverter</em> looks for the level of the heading and turns that into LaTeX (it also adds as label like \"label{sect:title}\").</p>, <p></p>, <p></p>, <p></p>, <p></p>]", "author": "'/path/to/my/article/XXX.eps') ", "tags": ["ipython", "notebook", "tutorial"], "date_published": "2013-07-14", "title": "Convert IPython notebook to ApJ or A&A article"}